#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#"""
#Telegram Bot –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤
#–°–æ–∑–¥–∞–Ω –¥–ª—è –ö—Å—é—à–∏ ‚ù§Ô∏è
#"""

import logging
import sqlite3
import random
import asyncio
import os
from datetime import datetime, timedelta, date, time as dt_time
from typing import Dict, List, Optional
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# ============= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =============

# –¢–æ–∫–µ–Ω –∏–∑ GitHub Secrets
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ADMIN_ID –∏–∑ GitHub Secrets
admin_id_env = os.environ.get('ADMIN_ID')

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–≤–æ–π)
# üëá –∑–∞–º–µ–Ω–∏—Ç–µ 55948371 –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID
ADMIN_ID = int(admin_id_env) if admin_id_env and admin_id_env.isdigit() else 55948371

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError(
        "‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
        "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ GitHub Secrets:\n"
        "Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New secret\n"
        "Name: BOT_TOKEN\n"
        "Value: —Ç–æ–∫–µ–Ω –æ—Ç @BotFather"
    )

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_NAME = 'medications.db'

# –û–±—Ä–∞—â–µ–Ω–∏—è
NICKNAMES = ["–°–æ–ª–Ω—ã—à–∫–æ", "–ú—ã—à–∫–∞", "–ö–æ—Ç—ë–Ω–æ–∫", "–õ—é–±–∏–º–∞—è", "–ö—Å—é—à–µ–Ω—å–∫–∞"]

# –§—Ä–∞–∑—ã –ø–æ—Ö–≤–∞–ª—ã
PRAISE_MESSAGES = [
        "üåü –£–º–Ω–∏—á–∫–∞, –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π!",
        "üí™ –ú–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
        "‚ù§Ô∏è –û—Ç–ª–∏—á–Ω–æ, –∫–æ—Ç—ë–Ω–æ–∫!",
        "üéâ –°—É–ø–µ—Ä! –¢—ã –±–æ–ª—å—à–∞—è —É–º–Ω–∏—Ü–∞!",
        "üíñ –Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è!",
        "üå∫ –°–æ–ª–Ω—ã—à–∫–æ –º–æ—ë, —Ç—ã –ª—É—á—à–∞—è!"
    ]

# –§—Ä–∞–∑—ã –ø—Ä–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–∏
POSTPONE_MESSAGES = [
        "üòä –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ",
        "üëå –õ–∞–¥–Ω–æ, –Ω–∞–ø–∏—à—É —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ",
        "üí´ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, —Å–æ–ª–Ω—ã—à–∫–æ",
        "üïê –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é —Å–Ω–æ–≤–∞",
        "üíù –•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å!",
        "‚ò∫Ô∏è –ü–æ–Ω—è—Ç–Ω–æ, –≤–µ—Ä–Ω—É—Å—å –∫ —Ç–µ–±–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è",
        "ü§ó –ù–µ –≤–æ–ø—Ä–æ—Å, –≤–µ—Ä–Ω—É—Å—å –ø–æ–∑–∂–µ"
    ]

# –ü–µ—Ä–∏–æ–¥—ã –¥–Ω—è
PERIODS = {
    'morning': 'üåÖ –£—Ç—Ä–æ',
    'day': '‚òÄÔ∏è –î–µ–Ω—å',
    'evening': 'üåÜ –í–µ—á–µ—Ä',
    'night': 'üåô –ù–æ—á—å'
}

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
WEEKDAYS_FULL = {
    0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: '–í—Ç–æ—Ä–Ω–∏–∫',
    2: '–°—Ä–µ–¥–∞',
    3: '–ß–µ—Ç–≤–µ—Ä–≥',
    4: '–ü—è—Ç–Ω–∏—Ü–∞',
    5: '–°—É–±–±–æ—Ç–∞',
    6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

WEEKDAYS_SHORT = {0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'}

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    'first_pill': {'name': 'üèÜ –ü–µ—Ä–≤–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞', 'description': '–í—ã–ø–∏–ª–∞ –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–µ—Ç–∫—É'},
    'week_streak': {'name': 'üî• –ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤', 'description': '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤'},
    'first_course': {'name': 'üíØ –ü–µ—Ä–≤—ã–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫—É—Ä—Å', 'description': '–ó–∞–≤–µ—Ä—à–∏–ª–∞ –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å'},
    'three_courses': {'name': 'üí™ –¢—Ä–∏ –∫—É—Ä—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'description': '–ó–∞–≤–µ—Ä—à–∏–ª–∞ —Ç—Ä–∏ –∫—É—Ä—Å–∞'},
    'fifty_pills': {'name': '‚≠êÔ∏è 50 —Ç–∞–±–ª–µ—Ç–æ–∫ –ø—Ä–∏–Ω—è—Ç–æ', 'description': '–ü—Ä–∏–Ω—è–ª–∞ 50 —Ç–∞–±–ª–µ—Ç–æ–∫'},
    'hundred_pills': {'name': 'üåü 100 —Ç–∞–±–ª–µ—Ç–æ–∫ –ø—Ä–∏–Ω—è—Ç–æ', 'description': '–ü—Ä–∏–Ω—è–ª–∞ 100 —Ç–∞–±–ª–µ—Ç–æ–∫'},
    'month_streak': {'name': 'üëë –ú–µ—Å—è—Ü –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤', 'description': '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤'},
    'perfect_course': {'name': 'üéØ –ò–¥–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å', 'description': '–ó–∞–≤–µ—Ä—à–∏–ª–∞ –∫—É—Ä—Å –±–µ–∑ –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞'}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(ADD_MED_NAME, ADD_MED_DURATION, ADD_MED_DURATION_INPUT, 
 ADD_MED_SCHEDULE_TYPE, ADD_MED_WEEKDAYS, ADD_MED_FREQUENCY,
 ADD_MED_TIMES_PERIOD, ADD_MED_TIME_INPUT, ADD_MED_REMINDER,
 ADD_MED_DOSAGE_CHOICE, ADD_MED_DOSAGE_SCHEME, ADD_MED_CONFIRM,
 EDIT_MED_SELECT, EDIT_MED_ACTION, EDIT_MED_VALUE,
 ADMIN_BROADCAST, EDIT_MED_NAME, EDIT_MED_NAME_INPUT, 
 EDIT_MED_DURATION, EDIT_MED_DURATION_INPUT, 
 EDIT_MED_SCHEDULE_TYPE, EDIT_MED_WEEKDAYS, 
 EDIT_MED_FREQUENCY, EDIT_MED_TIMES_PERIOD, EDIT_MED_TIME_INPUT, 
 EDIT_MED_REMINDER, EDIT_MED_CONFIRM) = range(27)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============= –ë–ê–ó–ê –î–ê–ù–ù–´–• =============

def get_connection():
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    conn = sqlite3.connect(DATABASE_NAME)
    conn.row_factory = sqlite3.Row
    return conn

from contextlib import contextmanager

@contextmanager
def get_db():
    """Context manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = get_connection()
    try:
        yield conn
        conn.commit()
    except Exception as e:
        conn.rollback()
        logger.error(f"Database error: {e}")
        raise
    finally:
        conn.close()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE NOT NULL,
        name TEXT,
        authorized BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ authorized –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î)
    try:
        c.execute('ALTER TABLE users ADD COLUMN authorized BOOLEAN DEFAULT 0')
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        c.execute('UPDATE users SET authorized = 1 WHERE authorized IS NULL OR authorized = 0')
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è: –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –¢–∞–±–ª–∏—Ü–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
    c.execute('''CREATE TABLE IF NOT EXISTS medications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        duration_days INTEGER NOT NULL,
        start_date DATE NOT NULL,
        end_date DATE NOT NULL,
        is_active BOOLEAN DEFAULT 1,
        schedule_type TEXT DEFAULT 'daily',
        weekdays TEXT,
        has_dosage_scheme BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–∏—ë–º–∞
    c.execute('''CREATE TABLE IF NOT EXISTS schedules (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        medication_id INTEGER NOT NULL,
        time TEXT NOT NULL,
        period TEXT NOT NULL,
        reminder_interval INTEGER DEFAULT 60,
        FOREIGN KEY (medication_id) REFERENCES medications(id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏—ë–º–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS medication_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        medication_id INTEGER NOT NULL,
        schedule_id INTEGER NOT NULL,
        scheduled_date DATE NOT NULL,
        scheduled_time TEXT NOT NULL,
        taken_time TIMESTAMP,
        status TEXT NOT NULL,
        postpone_count INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (medication_id) REFERENCES medications(id),
        FOREIGN KEY (schedule_id) REFERENCES schedules(id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ö–µ–º –¥–æ–∑–∏—Ä–æ–≤–∫–∏
    c.execute('''CREATE TABLE IF NOT EXISTS dosage_schemes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        medication_id INTEGER NOT NULL,
        day_from INTEGER NOT NULL,
        day_to INTEGER NOT NULL,
        dosage TEXT NOT NULL,
        times TEXT NOT NULL,
        FOREIGN KEY (medication_id) REFERENCES medications(id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS achievements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        achievement_type TEXT NOT NULL,
        unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, achievement_type),
        FOREIGN KEY (user_id) REFERENCES users(id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS postponed_reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        medication_id INTEGER NOT NULL,
        schedule_id INTEGER NOT NULL,
        user_telegram_id INTEGER NOT NULL,
        scheduled_date DATE NOT NULL,
        original_time TIMESTAMP NOT NULL,
        next_reminder_time TIMESTAMP NOT NULL,
        postpone_count INTEGER DEFAULT 1,
        reminder_interval INTEGER DEFAULT 60,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (medication_id) REFERENCES medications(id),
        FOREIGN KEY (schedule_id) REFERENCES schedules(id)
    )''')

    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º reminder_interval –µ—Å–ª–∏ –Ω–µ—Ç
    try:
        c.execute('ALTER TABLE postponed_reminders ADD COLUMN reminder_interval INTEGER DEFAULT 60')
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ reminder_interval –≤ postponed_reminders")
    except sqlite3.OperationalError:
        pass  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö) –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞
    c.execute('''CREATE TABLE IF NOT EXISTS active_reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        medication_id INTEGER NOT NULL,
        schedule_id INTEGER NOT NULL,
        user_telegram_id INTEGER NOT NULL,
        scheduled_date DATE NOT NULL,
        first_reminder_time TIMESTAMP NOT NULL,
        last_reminder_time TIMESTAMP NOT NULL,
        reminder_count INTEGER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (medication_id) REFERENCES medications(id),
        FOREIGN KEY (schedule_id) REFERENCES schedules(id),
        UNIQUE(medication_id, schedule_id, scheduled_date)
    )''')

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –∞–¥–º–∏–Ω–∞
    c.execute('SELECT id FROM users WHERE telegram_id = ?', (ADMIN_ID,))
    if c.fetchone():
        c.execute('UPDATE users SET authorized = 1 WHERE telegram_id = ?', (ADMIN_ID,))

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    try:
        c.execute('CREATE INDEX IF NOT EXISTS idx_medications_user_active ON medications(user_id, is_active)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_medications_dates ON medications(start_date, end_date)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_schedules_medication ON schedules(medication_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_logs_medication_date ON medication_logs(medication_id, scheduled_date)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_logs_user_date ON medication_logs(medication_id, scheduled_date)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_postponed_user ON postponed_reminders(user_telegram_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_achievements_user ON achievements(user_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_active_reminders_user ON active_reminders(user_telegram_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_active_reminders_time ON active_reminders(last_reminder_time)')
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    except sqlite3.OperationalError as e:
        logger.warning(f"–ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {e}")

    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def get_or_create_user(telegram_id: int, name: str = None) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
            is_authorized = 1 if telegram_id == ADMIN_ID else 0
            c.execute('''INSERT OR IGNORE INTO users 
                         (telegram_id, name, authorized) 
                         VALUES (?, ?, ?)''', 
                      (telegram_id, name, is_authorized))

            # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º ID
            c.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            result = c.fetchone()
            return result['id']
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_or_create_user: {e}")
        raise

def is_user_authorized(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            c.execute('SELECT authorized FROM users WHERE telegram_id = ?', (telegram_id,))
            result = c.fetchone()

            if result:
                return bool(result['authorized'])
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ is_user_authorized: {e}")
        return False

def set_user_authorization(telegram_id: int, authorized: bool):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            c.execute('UPDATE users SET authorized = ? WHERE telegram_id = ?', 
                      (1 if authorized else 0, telegram_id))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ set_user_authorization: {e}")
        raise

async def request_user_authorization(telegram_id: int, name: str, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"auth_approve_{telegram_id}"),
            InlineKeyboardButton("‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"auth_deny_{telegram_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"üîî <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø</b>\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üÜî ID: {telegram_id}\n\n"
        f"–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞?"
    )

    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {e}")

def get_user_by_id(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM users WHERE id = ?', (user_id,))
            result = c.fetchone()
            return dict(result) if result else None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_user_by_id: {e}")
        return None

def get_all_users() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM users ORDER BY created_at DESC')
            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_all_users: {e}")
        return []

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏
def create_medication(user_id: int, name: str, duration_days: int, 
                     start_date: date, schedule_type: str = 'daily',
                     weekdays: str = None, has_dosage_scheme: bool = False) -> int:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            end_date = start_date + timedelta(days=duration_days - 1)

            c.execute('''INSERT INTO medications 
                         (user_id, name, duration_days, start_date, end_date, 
                          schedule_type, weekdays, has_dosage_scheme)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                      (user_id, name, duration_days, start_date.isoformat(), 
                       end_date.isoformat(), schedule_type, weekdays, has_dosage_scheme))

            medication_id = c.lastrowid
            return medication_id
    except Exception as e:
        logger.error(f"Error creating medication: {e}")
        raise

def get_active_medications(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''SELECT * FROM medications 
                         WHERE user_id = ? AND is_active = 1
                         ORDER BY start_date DESC''', (user_id,))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_active_medications: {e}")
        return []

def get_completed_medications(user_id: int, limit: int = 20) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''SELECT * FROM medications 
                         WHERE user_id = ? AND is_active = 0
                         ORDER BY end_date DESC LIMIT ?''', (user_id, limit))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_completed_medications: {e}")
        return []

def get_medication_by_id(medication_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –ø–æ ID"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('SELECT * FROM medications WHERE id = ?', (medication_id,))
            result = c.fetchone()

            return dict(result) if result else None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_medication_by_id: {e}")
        return None

def update_medication(medication_id: int, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    ALLOWED_FIELDS = {
        'name', 'duration_days', 'start_date', 'end_date', 'is_active',
        'schedule_type', 'weekdays', 'has_dosage_scheme'
    }

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    safe_kwargs = {k: v for k, v in kwargs.items() if k in ALLOWED_FIELDS}

    if not safe_kwargs:
        raise ValueError("No valid fields to update")

    try:
        with get_db() as conn:
            c = conn.cursor()

            fields = ', '.join([f"{k} = ?" for k in safe_kwargs.keys()])
            values = list(safe_kwargs.values()) + [medication_id]

            c.execute(f'UPDATE medications SET {fields} WHERE id = ?', values)
    except Exception as e:
        logger.error(f"Error updating medication: {e}")
        raise

def deactivate_medication(medication_id: int):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    update_medication(medication_id, is_active=0)

def delete_medication_by_id(medication_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('DELETE FROM medications WHERE id = ?', (medication_id,))
            c.execute('DELETE FROM schedules WHERE medication_id = ?', (medication_id,))
            c.execute('DELETE FROM medication_logs WHERE medication_id = ?', (medication_id,))
            c.execute('DELETE FROM dosage_schemes WHERE medication_id = ?', (medication_id,))
            c.execute('DELETE FROM postponed_reminders WHERE medication_id = ?', (medication_id,))
    except Exception as e:
        logger.error(f"Error deleting medication: {e}")
        raise

def extend_medication_course(medication_id: int, extra_days: int):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∫—É—Ä—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    med = get_medication_by_id(medication_id)
    if not med:
        return

    end_date = datetime.strptime(med['end_date'], '%Y-%m-%d').date()
    new_end_date = end_date + timedelta(days=extra_days)
    new_duration = med['duration_days'] + extra_days

    update_medication(medication_id, 
                     end_date=new_end_date.isoformat(),
                     duration_days=new_duration)

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏
def create_schedule(medication_id: int, time_str: str, period: str, 
                   reminder_interval: int = 60) -> int:
    """–°–æ–∑–¥–∞—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''INSERT INTO schedules 
                         (medication_id, time, period, reminder_interval)
                         VALUES (?, ?, ?, ?)''',
                      (medication_id, time_str, period, reminder_interval))

            return c.lastrowid
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ create_schedule: {e}")
        raise

def get_medication_schedules(medication_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('SELECT * FROM schedules WHERE medication_id = ? ORDER BY time',
                      (medication_id,))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_medication_schedules: {e}")
        return []

def delete_medication_schedules(medication_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('DELETE FROM schedules WHERE medication_id = ?', (medication_id,))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ delete_medication_schedules: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
def log_medication_taken(medication_id: int, schedule_id: int, 
                        scheduled_date: date, scheduled_time: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—ë–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            taken_time = datetime.now(TIMEZONE)

            c.execute('''INSERT INTO medication_logs 
                         (medication_id, schedule_id, scheduled_date, scheduled_time, 
                          taken_time, status)
                         VALUES (?, ?, ?, ?, ?, 'taken')''',
                      (medication_id, schedule_id, scheduled_date.isoformat(), 
                       scheduled_time, taken_time.isoformat()))

            logger.info(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ {medication_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ log_medication_taken: {e}")
        raise

def log_medication_missed(medication_id: int, schedule_id: int,
                         scheduled_date: date, scheduled_time: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–∏—ë–º–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''INSERT INTO medication_logs 
                         (medication_id, schedule_id, scheduled_date, scheduled_time, 
                          status)
                         VALUES (?, ?, ?, ?, 'missed')''',
                      (medication_id, schedule_id, scheduled_date.isoformat(), 
                       scheduled_time))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ log_medication_missed: {e}")
        raise

def get_medication_logs(medication_id: int, limit: int = 100) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –ø—Ä–∏—ë–º–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''SELECT * FROM medication_logs 
                         WHERE medication_id = ? 
                         ORDER BY scheduled_date DESC, scheduled_time DESC 
                         LIMIT ?''', (medication_id, limit))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_medication_logs: {e}")
        return []

def get_logs_for_date(user_id: int, target_date: date) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''SELECT ml.*, m.name as medication_name, s.period, s.time
                         FROM medication_logs ml
                         JOIN medications m ON ml.medication_id = m.id
                         JOIN schedules s ON ml.schedule_id = s.id
                         WHERE m.user_id = ? AND ml.scheduled_date = ?
                         ORDER BY ml.scheduled_time''',
                      (user_id, target_date.isoformat()))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_logs_for_date: {e}")
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
def unlock_achievement(user_id: int, achievement_type: str) -> bool:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω–æ–≤–æ–µ"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            c.execute('''INSERT INTO achievements (user_id, achievement_type)
                         VALUES (?, ?)''', (user_id, achievement_type))
            return True
    except sqlite3.IntegrityError:
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ unlock_achievement: {e}")
        return False

def get_user_achievements(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('''SELECT * FROM achievements 
                         WHERE user_id = ? 
                         ORDER BY unlocked_at DESC''', (user_id,))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_user_achievements: {e}")
        return []

# –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_user_statistics(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
            c.execute('''SELECT COUNT(*) as count FROM medications 
                         WHERE user_id = ? AND is_active = 0''', (user_id,))
            completed_courses = c.fetchone()['count']

            # –ü—Ä–∏–Ω—è—Ç–æ —Ç–∞–±–ª–µ—Ç–æ–∫
            c.execute('''SELECT COUNT(*) as count FROM medication_logs ml
                         JOIN medications m ON ml.medication_id = m.id
                         WHERE m.user_id = ? AND ml.status = 'taken' ''', (user_id,))
            total_taken = c.fetchone()['count']

            # –ü—Ä–æ–ø—É—â–µ–Ω–æ
            c.execute('''SELECT COUNT(*) as count FROM medication_logs ml
                         JOIN medications m ON ml.medication_id = m.id
                         WHERE m.user_id = ? AND ml.status = 'missed' ''', (user_id,))
            total_missed = c.fetchone()['count']

            # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            total_logs = total_taken + total_missed
            success_rate = (total_taken / total_logs * 100) if total_logs > 0 else 0

            # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
            c.execute('''SELECT scheduled_date, status FROM medication_logs ml
                         JOIN medications m ON ml.medication_id = m.id
                         WHERE m.user_id = ?
                         ORDER BY scheduled_date DESC, scheduled_time DESC
                         LIMIT 100''', (user_id,))

            logs = c.fetchall()
            current_streak = 0
            dates_checked = set()

            for log in logs:
                log_date = log['scheduled_date']
                if log_date not in dates_checked:
                    dates_checked.add(log_date)
                    if log['status'] == 'taken':
                        current_streak += 1
                    else:
                        break

            return {
                'completed_courses': completed_courses,
                'total_taken': total_taken,
                'total_missed': total_missed,
                'success_rate': round(success_rate, 1),
                'current_streak': current_streak
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_user_statistics: {e}")
        return {
            'completed_courses': 0,
            'total_taken': 0,
            'total_missed': 0,
            'success_rate': 0,
            'current_streak': 0
        }

# –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def create_or_update_postponed_reminder(medication_id: int, schedule_id: int, user_telegram_id: int,
                                        scheduled_date: date, original_time: datetime, 
                                        next_time: datetime, reminder_interval: int, postpone_count: int = 1):
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã/sched
            c.execute('''SELECT id, postpone_count FROM postponed_reminders 
                         WHERE medication_id = ? AND schedule_id = ? AND scheduled_date = ?''',
                      (medication_id, schedule_id, scheduled_date.isoformat()))
            existing = c.fetchone()

            if existing:
                new_count = existing['postpone_count'] + postpone_count
                c.execute('''UPDATE postponed_reminders SET 
                             next_reminder_time = ?, postpone_count = ?, reminder_interval = ?
                             WHERE id = ?''',
                          (next_time.isoformat(), new_count, reminder_interval, existing['id']))
            else:
                c.execute('''INSERT INTO postponed_reminders 
                             (medication_id, schedule_id, user_telegram_id, scheduled_date,
                              original_time, next_reminder_time, postpone_count, reminder_interval)
                             VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                          (medication_id, schedule_id, user_telegram_id, scheduled_date.isoformat(),
                           original_time.isoformat(), next_time.isoformat(), postpone_count, reminder_interval))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ create_or_update_postponed_reminder: {e}")
        raise

def get_due_postponed_reminders() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            now = datetime.now(TIMEZONE).isoformat()

            c.execute('''SELECT * FROM postponed_reminders 
                         WHERE next_reminder_time <= ?''', (now,))

            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_due_postponed_reminders: {e}")
        return []

def delete_postponed_reminder(reminder_id: int):
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        with get_db() as conn:
            c = conn.cursor()

            c.execute('DELETE FROM postponed_reminders WHERE id = ?', (reminder_id,))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ delete_postponed_reminder: {e}")
        raise

# –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞)
def create_active_reminder(medication_id: int, schedule_id: int, user_telegram_id: int,
                           scheduled_date: date):
    """–°–æ–∑–¥–∞—ë—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            now = datetime.now(TIMEZONE)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            c.execute('''INSERT OR IGNORE INTO active_reminders 
                         (medication_id, schedule_id, user_telegram_id, scheduled_date,
                          first_reminder_time, last_reminder_time, reminder_count)
                         VALUES (?, ?, ?, ?, ?, ?, 1)''',
                      (medication_id, schedule_id, user_telegram_id, scheduled_date.isoformat(),
                       now.isoformat(), now.isoformat()))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ create_active_reminder: {e}")
        raise

def get_unanswered_reminders() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (–ø—Ä–æ—à–ª–æ 15+ –º–∏–Ω—É—Ç, –º–µ–Ω—å—à–µ 5 –ø–æ–ø—ã—Ç–æ–∫)"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            now = datetime.now(TIMEZONE)
            fifteen_min_ago = (now - timedelta(minutes=15)).isoformat()
            
            c.execute('''SELECT * FROM active_reminders 
                         WHERE last_reminder_time <= ? AND reminder_count < 5''',
                      (fifteen_min_ago,))
            
            results = c.fetchall()
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_unanswered_reminders: {e}")
        return []

def delete_active_reminder(medication_id: int, schedule_id: int, scheduled_date: date):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª)"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            c.execute('''DELETE FROM active_reminders 
                         WHERE medication_id = ? AND schedule_id = ? AND scheduled_date = ?''',
                      (medication_id, schedule_id, scheduled_date.isoformat()))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ delete_active_reminder: {e}")
        raise

def update_active_reminder_count(reminder_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        with get_db() as conn:
            c = conn.cursor()
            now = datetime.now(TIMEZONE)
            
            c.execute('''UPDATE active_reminders 
                         SET last_reminder_time = ?, reminder_count = reminder_count + 1
                         WHERE id = ?''',
                      (now.isoformat(), reminder_id))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ update_active_reminder_count: {e}")
        raise

# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

def get_greeting_by_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    current_hour = datetime.now(TIMEZONE).hour

    if 6 <= current_hour < 11:
        return "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 11 <= current_hour < 17:
        return "‚òÄÔ∏è –ü—Ä–∏–≤–µ—Ç"
    elif 17 <= current_hour < 22:
        return "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        return "üåô"

def get_random_nickname():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    return random.choice(NICKNAMES)

def check_and_unlock_achievements(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    stats = get_user_statistics(user_id)
    unlocked = []

    # –ü–µ—Ä–≤–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞
    if stats['total_taken'] >= 1:
        if unlock_achievement(user_id, 'first_pill'):
            unlocked.append('first_pill')

    # –ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    if stats['current_streak'] >= 7:
        if unlock_achievement(user_id, 'week_streak'):
            unlocked.append('week_streak')

    # –ú–µ—Å—è—Ü –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    if stats['current_streak'] >= 30:
        if unlock_achievement(user_id, 'month_streak'):
            unlocked.append('month_streak')

    # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    if stats['completed_courses'] >= 1:
        if unlock_achievement(user_id, 'first_course'):
            unlocked.append('first_course')

    if stats['completed_courses'] >= 3:
        if unlock_achievement(user_id, 'three_courses'):
            unlocked.append('three_courses')

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫
    if stats['total_taken'] >= 50:
        if unlock_achievement(user_id, 'fifty_pills'):
            unlocked.append('fifty_pills')

    if stats['total_taken'] >= 100:
        if unlock_achievement(user_id, 'hundred_pills'):
            unlocked.append('hundred_pills')

    return unlocked

# ============= –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• =============

def validate_date(date_str: str) -> tuple:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (valid, error_message, parsed_date)
    """
    try:
        parsed_date = datetime.strptime(date_str, '%d.%m.%Y').date()
        start_date = datetime.now(TIMEZONE).date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ
        if parsed_date <= start_date:
            return False, "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!", None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å (–Ω–µ –±–æ–ª—å—à–µ 3 –ª–µ—Ç)
        max_date = start_date + timedelta(days=1095)  # 3 –≥–æ–¥–∞
        if parsed_date > max_date:
            return False, "–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º 3 –≥–æ–¥–∞)!", None

        return True, "", parsed_date

    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", None

def validate_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
    try:
        datetime.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False

# ============= –§–£–ù–ö–¶–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–ò –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –õ–ï–ö–ê–†–°–¢–í =============

def add_navigation_buttons(keyboard, step_number=None, show_back=True, show_cancel=True):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    nav_row = []
    if show_back and step_number and step_number > 1:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"))
    if show_cancel:
        nav_row.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med"))
    if nav_row:
        keyboard.append(nav_row)
    return keyboard

async def go_back_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —à–∞–≥–æ–≤
    step_history = context.user_data.get('step_history', [])

    if not step_history or len(step_history) < 2:
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º
        return await cancel_add_medication(update, context)

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    step_history.pop()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    previous_step = step_history[-1]
    context.user_data['step_history'] = step_history

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    if previous_step == ADD_MED_NAME:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>\n\n"
            "üìù –®–∞–≥ 1/8: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n"
            "(–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Å–ø–∏—Ä–∏–Ω, –í–∏—Ç–∞–º–∏–Ω D)",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_NAME

    elif previous_step == ADD_MED_DURATION:
        keyboard = [
            [InlineKeyboardButton("3 –¥–Ω—è", callback_data="duration_3"),
             InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data="duration_5")],
            [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="duration_7"),
             InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data="duration_10")],
            [InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data="duration_14"),
             InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data="duration_21")],
            [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="duration_30")],
            [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="duration_custom")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="duration_date")],
        ]
        keyboard = add_navigation_buttons(keyboard, step_number=2, show_back=True)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data.get('med_name', '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ')}</b>\n\n"
            "üìÖ –®–∞–≥ 2/8: –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_DURATION

    elif previous_step == ADD_MED_SCHEDULE_TYPE:
        keyboard = [
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="schedule_daily")],
            [InlineKeyboardButton("–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="schedule_every_other")],
            [InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="schedule_weekdays")],
        ]
        keyboard = add_navigation_buttons(keyboard, step_number=3)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data.get('med_name')}</b>\n"
            f"üìÖ –ö—É—Ä—Å: {context.user_data.get('med_duration')} –¥–Ω–µ–π\n\n"
            "üìã –®–∞–≥ 3/8: –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_SCHEDULE_TYPE

    elif previous_step == ADD_MED_WEEKDAYS:
        keyboard = []
        selected = context.user_data.get('selected_weekdays', [])
        for day_num, day_name in WEEKDAYS_FULL.items():
            icon = "‚òëÔ∏è" if day_num in selected else "‚òê"
            keyboard.append([InlineKeyboardButton(f"{icon} {day_name}", callback_data=f"weekday_{day_num}")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_done")])
        keyboard = add_navigation_buttons(keyboard, step_number=3)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data.get('med_name')}</b>\n\n"
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_WEEKDAYS

    elif previous_step == ADD_MED_FREQUENCY:
        keyboard = [
            [InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="freq_1")],
            [InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_2")],
            [InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_3")],
            [InlineKeyboardButton("4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_4")],
        ]
        keyboard = add_navigation_buttons(keyboard, step_number=4)
        reply_markup = InlineKeyboardMarkup(keyboard)

        schedule_info = ""
        if context.user_data.get('schedule_type') == 'daily':
            schedule_info = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
        elif context.user_data.get('schedule_type') == 'every_other':
            schedule_info = "–ß–µ—Ä–µ–∑ –¥–µ–Ω—å"
        elif context.user_data.get('schedule_type') == 'weekdays':
            selected = context.user_data.get('selected_weekdays', [])
            days_str = ', '.join([WEEKDAYS_SHORT[d] for d in sorted(selected)])
            schedule_info = f"{days_str}"

        await query.message.edit_text(
            f"üíä <b>{context.user_data.get('med_name')}</b>\n"
            f"üìÖ –ö—É—Ä—Å: {context.user_data.get('med_duration')} –¥–Ω–µ–π\n"
            f"üìã –ü—Ä–∏—ë–º: {schedule_info}\n\n"
            "üî¢ –®–∞–≥ 4/8: –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_FREQUENCY

    elif previous_step == ADD_MED_TIMES_PERIOD:
        current_index = context.user_data.get('current_time_index', 0)
        total = context.user_data.get('frequency', 1)

        keyboard = [
            [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ (6-11)", callback_data="period_morning")],
            [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å (11-17)", callback_data="period_day")],
            [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä (17-22)", callback_data="period_evening")],
            [InlineKeyboardButton("üåô –ù–æ—á—å (22-6)", callback_data="period_night")],
        ]
        keyboard = add_navigation_buttons(keyboard, step_number=5)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data.get('med_name')}</b>\n"
            f"‚è∞ –ü—Ä–∏—ë–º {current_index + 1}/{total}\n\n"
            "–®–∞–≥ 5/8: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_TIMES_PERIOD

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ - –æ—Ç–º–µ–Ω—è–µ–º
    return await cancel_add_medication(update, context)


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =============

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT id, authorized FROM users WHERE telegram_id = ?', (user.id,))
    result = c.fetchone()
    conn.close()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ (message –∏–ª–∏ callback)
    if update.callback_query:
        send_message = update.callback_query.message.reply_text
    else:
        send_message = update.message.reply_text

    if not result:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—ë–º
        get_or_create_user(user.id, user.first_name)

        # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if user.id != ADMIN_ID:
            await request_user_authorization(user.id, user.first_name, context)
            await send_message(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "üìã –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω."
            )
            return
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not result['authorized'] and user.id != ADMIN_ID:
            # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
            await request_user_authorization(user.id, user.first_name, context)
            await send_message(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "üìã –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω."
            )
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if not is_user_authorized(user.id):
        await send_message(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await send_message(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º.\n"
        "–ü–æ–º–æ–≥—É –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –≤–æ–≤—Ä–µ–º—è! üíä\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    help_text = """‚ùì <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–µ

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
‚Ä¢ –ü—Ä–∏–Ω—è—Ç—ã–µ —Ç–∞–±–ª–µ—Ç–∫–∏
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ

<b>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å</b>
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—ë–º–æ–≤
‚Ä¢ ‚úÖ - –í—Å–µ –ø—Ä–∏—ë–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
‚Ä¢ ‚ö†Ô∏è - –ü—Ä–æ–ø—É—â–µ–Ω 1 –ø—Ä–∏—ë–º
‚Ä¢ ‚ùå - –ü—Ä–æ–ø—É—â–µ–Ω–æ 2+ –ø—Ä–∏—ë–º–∞

<b>üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>
–ë–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø—Ä–∏—ë–º–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
‚Ä¢ <b>‚úÖ –í—ã–ø–∏–ª–∞</b> - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—ë–º
‚Ä¢ <b>‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å</b> - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ

<b>üìù –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ:</b>
1. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí ‚ûï –î–æ–±–∞–≤–∏—Ç—å
2. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
3. –í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞
4. –£–∫–∞–∂–∏ —á–∞—Å—Ç–æ—Ç—É (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å/—á–µ—Ä–µ–∑ –¥–µ–Ω—å/–ø–æ –¥–Ω—è–º)
5. –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤ –≤ –¥–µ–Ω—å
6. –£—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–æ–≤
7. –ù–∞—Å—Ç—Ä–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

<b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üèÜ –ü–µ—Ä–≤–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞
üî• –ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
üíØ –ü–µ—Ä–≤—ã–π –∫—É—Ä—Å
üí™ –¢—Ä–∏ –∫—É—Ä—Å–∞
‚≠êÔ∏è 50 —Ç–∞–±–ª–µ—Ç–æ–∫
üåü 100 —Ç–∞–±–ª–µ—Ç–æ–∫
üëë –ú–µ—Å—è—Ü –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
üéØ –ò–¥–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
"""

    if update.message:
        await update.message.reply_text(help_text, parse_mode='HTML')
    elif update.callback_query:
        await update.callback_query.message.reply_text(help_text, parse_mode='HTML')
        await update.callback_query.answer()

# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–ï–ö–ê–†–°–¢–í =============

async def medications_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–∫—É—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", callback_data="med_current")],
        [InlineKeyboardButton("‚úÖ –í—ã–ø–∏—Ç—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", callback_data="med_completed")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "üíä <b>–õ–µ–∫–∞—Ä—Å—Ç–≤–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫:"

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_current_medications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    user_id = get_or_create_user(update.effective_user.id)
    medications = get_active_medications(user_id)

    if not medications:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="medications")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "üìù <b>–¢–µ–∫—É—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return

    text = "üìù <b>–¢–µ–∫—É—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:</b>\n\n"
    keyboard = []

    today = datetime.now(TIMEZONE).date()

    for med in medications:
        start = datetime.strptime(med['start_date'], '%Y-%m-%d').date()
        end = datetime.strptime(med['end_date'], '%Y-%m-%d').date()

        days_passed = max(0, min((today - start).days + 1, med['duration_days']))
        days_left = max(0, (end - today).days)

        text += f"üíä <b>{med['name']}</b>\n"
        text += f"üìÖ –ù–∞—á–∞–ª–æ: {start.strftime('%d.%m.%Y')}\n"
        text += f"‚è≥ –ü—Ä–∏–Ω—è—Ç–æ: {days_passed} –∏–∑ {med['duration_days']} –¥–Ω–µ–π\n"
        text += f"üìÜ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n"
        text += f"üèÅ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end.strftime('%d.%m.%Y')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–æ–≤
        schedules = get_medication_schedules(med['id'])
        if schedules:
            times_str = ", ".join([f"{PERIODS.get(s['period'], '‚è∞')} {s['time']}" for s in schedules])
            text += f"‚è∞ –í—Ä–µ–º—è: {times_str}\n"

        text += "\n"

        keyboard.append([InlineKeyboardButton(f"üìã {med['name']}", callback_data=f"med_detail_{med['id']}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="medications")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_completed_medications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    user_id = get_or_create_user(update.effective_user.id)
    medications = get_completed_medications(user_id)

    if not medications:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="medications")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "‚úÖ <b>–í—ã–ø–∏—Ç—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return

    text = "‚úÖ <b>–í—ã–ø–∏—Ç—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:</b>\n\n"

    for med in medications:
        start = datetime.strptime(med['start_date'], '%Y-%m-%d').date()
        end = datetime.strptime(med['end_date'], '%Y-%m-%d').date()

        text += f"üíä <b>{med['name']}</b>\n"
        text += f"üìÖ –ö—É—Ä—Å: {start.strftime('%d.%m.%Y')} - {end.strftime('%d.%m.%Y')}\n"
        text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {med['duration_days']} –¥–Ω–µ–π\n"
        text += f"‚úì –ó–∞–≤–µ—Ä—à—ë–Ω\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="medications")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_medication_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    schedules = get_medication_schedules(medication_id)

    start = datetime.strptime(med['start_date'], '%Y-%m-%d').date()
    end = datetime.strptime(med['end_date'], '%Y-%m-%d').date()
    today = datetime.now(TIMEZONE).date()

    days_passed = max(0, min((today - start).days + 1, med['duration_days']))
    days_left = max(0, (end - today).days)

    text = f"üíä <b>{med['name']}</b>\n\n"
    text += f"üìÖ –ù–∞—á–∞–ª–æ: {start.strftime('%d.%m.%Y')}\n"
    text += f"üèÅ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end.strftime('%d.%m.%Y')}\n"
    text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {med['duration_days']} –¥–Ω–µ–π\n"
    text += f"‚è≥ –ü—Ä–∏–Ω—è—Ç–æ: {days_passed} –¥–Ω–µ–π\n"
    text += f"üìÜ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n\n"

    if med['schedule_type'] == 'daily':
        text += "üìã –ü—Ä–∏—ë–º: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
    elif med['schedule_type'] == 'every_other':
        text += "üìã –ü—Ä–∏—ë–º: –ß–µ—Ä–µ–∑ –¥–µ–Ω—å\n\n"
    elif med['schedule_type'] == 'weekdays':
        weekdays_list = med['weekdays'].split(',') if med['weekdays'] else []
        days_str = ', '.join([WEEKDAYS_SHORT[int(d)] for d in weekdays_list])
        text += f"üìã –ü—Ä–∏—ë–º: {days_str}\n\n"

    if schedules:
        text += "‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏—ë–º–æ–≤:</b>\n"
        for sched in schedules:
            text += f"  ‚Ä¢ {PERIODS.get(sched['period'], '‚è∞')}: {sched['time']}\n"
        text += "\n"

    logs = get_medication_logs(medication_id, limit=1000)
    taken = len([l for l in logs if l['status'] == 'taken'])
    missed = len([l for l in logs if l['status'] == 'missed'])
    total = taken + missed

    if total > 0:
        success_rate = (taken / total) * 100
        text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"  ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken}\n"
        text += f"  ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed}\n"
        text += f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_med_{med['id']}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="med_current")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

# ============= –ù–ê–°–¢–†–û–ô–ö–ò =============

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data="add_medication")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", callback_data="edit_medications")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

# ============= –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ï–ö–ê–†–°–¢–í =============
async def add_medication_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    context.user_data.clear()
    context.user_data['step_history'] = [ADD_MED_NAME]

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>\n\n"
        "üìù –®–∞–≥ 1/8: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Å–ø–∏—Ä–∏–Ω, –í–∏—Ç–∞–º–∏–Ω D)",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_NAME

async def add_medication_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    med_name = update.message.text.strip()
    context.user_data['med_name'] = med_name
    context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_DURATION]

    keyboard = [
        [InlineKeyboardButton("3 –¥–Ω—è", callback_data="duration_3"),
         InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data="duration_5")],
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="duration_7"),
         InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data="duration_10")],
        [InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data="duration_14"),
         InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data="duration_21")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="duration_30")],
        [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="duration_custom")],
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="duration_date")],
    ]
    keyboard = add_navigation_buttons(keyboard, step_number=2, show_back=True)
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üíä <b>{med_name}</b>\n\n"
        "üìÖ –®–∞–≥ 2/8: –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_DURATION

async def add_medication_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "duration_custom":
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_DURATION_INPUT]

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data['med_name']}</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (1-365):",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_DURATION_INPUT

    elif query.data == "duration_date":
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_DURATION_INPUT]

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data['med_name']}</b>\n\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return ADD_MED_DURATION_INPUT

    else:
        duration = int(query.data.split('_')[1])
        context.user_data['med_duration'] = duration
        context.user_data['med_start_date'] = datetime.now(TIMEZONE).date()
        context.user_data['med_end_date'] = context.user_data['med_start_date'] + timedelta(days=duration - 1)
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_SCHEDULE_TYPE]

        return await ask_schedule_type(query, context)

async def add_medication_duration_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    text = update.message.text.strip()

    if '.' in text:
        try:
            end_date = datetime.strptime(text, '%d.%m.%Y').date()
            start_date = datetime.now(TIMEZONE).date()

            if end_date <= start_date:
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
                )
                return ADD_MED_DURATION_INPUT

            duration = (end_date - start_date).days + 1
            context.user_data['med_duration'] = duration
            context.user_data['med_start_date'] = start_date
            context.user_data['med_end_date'] = end_date
            context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_SCHEDULE_TYPE]

            keyboard = [
                [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="schedule_daily")],
                [InlineKeyboardButton("–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="schedule_every_other")],
                [InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="schedule_weekdays")],
            ]
            keyboard = add_navigation_buttons(keyboard, step_number=3, show_back=True)
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"üíä <b>{context.user_data['med_name']}</b>\n"
                f"üìÖ –ö—É—Ä—Å: {duration} –¥–Ω–µ–π\n\n"
                "üìã –®–∞–≥ 3/8: –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

            return ADD_MED_SCHEDULE_TYPE

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025)"
            )
            return ADD_MED_DURATION_INPUT

    try:
        duration = int(text)
        if duration < 1 or duration > 365:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365:")
            return ADD_MED_DURATION_INPUT

        context.user_data['med_duration'] = duration
        context.user_data['med_start_date'] = datetime.now(TIMEZONE).date()
        context.user_data['med_end_date'] = context.user_data['med_start_date'] + timedelta(days=duration - 1)
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_SCHEDULE_TYPE]

        keyboard = [
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="schedule_daily")],
            [InlineKeyboardButton("–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="schedule_every_other")],
            [InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="schedule_weekdays")],
        ]
        keyboard = add_navigation_buttons(keyboard, step_number=3, show_back=True)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üíä <b>{context.user_data['med_name']}</b>\n"
            f"üìÖ –ö—É—Ä—Å: {duration} –¥–Ω–µ–π\n\n"
            "üìã –®–∞–≥ 3/8: –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        return ADD_MED_SCHEDULE_TYPE

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ADD_MED_DURATION_INPUT

async def ask_schedule_type(query, context):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="schedule_daily")],
        [InlineKeyboardButton("–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="schedule_every_other")],
        [InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="schedule_weekdays")],
    ]
    keyboard = add_navigation_buttons(keyboard, step_number=3, show_back=True)
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üíä <b>{context.user_data['med_name']}</b>\n"
        f"üìÖ –ö—É—Ä—Å: {context.user_data['med_duration']} –¥–Ω–µ–π\n\n"
        "üìã –®–∞–≥ 3/8: –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_SCHEDULE_TYPE

async def add_medication_schedule_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    schedule_type = query.data.split('_', 1)[1]
    context.user_data['schedule_type'] = schedule_type

    if schedule_type == 'weekdays':
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_WEEKDAYS]

        keyboard = []
        for day_num, day_name in WEEKDAYS_FULL.items():
            keyboard.append([InlineKeyboardButton(f"‚òê {day_name}", callback_data=f"weekday_{day_num}")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_done")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"),
                         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data['selected_weekdays'] = []

        await query.message.edit_text(
            f"üíä <b>{context.user_data['med_name']}</b>\n\n"
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        return ADD_MED_WEEKDAYS
    else:
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_FREQUENCY]
        return await ask_frequency(query, context)

async def add_medication_weekdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
    query = update.callback_query

    if query.data == "weekdays_done":
        if not context.user_data.get('selected_weekdays'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!", show_alert=True)
            return ADD_MED_WEEKDAYS

        await query.answer()
        context.user_data['weekdays'] = ','.join(map(str, sorted(context.user_data['selected_weekdays'])))
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_FREQUENCY]
        return await ask_frequency(query, context)

    day_num = int(query.data.split('_')[1])
    selected = context.user_data.get('selected_weekdays', [])

    if day_num in selected:
        selected.remove(day_num)
    else:
        selected.append(day_num)

    context.user_data['selected_weekdays'] = selected

    keyboard = []
    for d_num, d_name in WEEKDAYS_FULL.items():
        icon = "‚òëÔ∏è" if d_num in selected else "‚òê"
        keyboard.append([InlineKeyboardButton(f"{icon} {d_name}", callback_data=f"weekday_{d_num}")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_done")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.answer()
    await query.message.edit_reply_markup(reply_markup=reply_markup)

    return ADD_MED_WEEKDAYS

async def ask_frequency(query, context):
    """–ó–∞–ø—Ä–æ—Å —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏—ë–º–∞"""
    keyboard = [
        [InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="freq_1")],
        [InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_2")],
        [InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_3")],
        [InlineKeyboardButton("4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_4")],
    ]
    keyboard = add_navigation_buttons(keyboard, step_number=4, show_back=True)
    reply_markup = InlineKeyboardMarkup(keyboard)

    schedule_info = ""
    if context.user_data['schedule_type'] == 'daily':
        schedule_info = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
    elif context.user_data['schedule_type'] == 'every_other':
        schedule_info = "–ß–µ—Ä–µ–∑ –¥–µ–Ω—å"
    elif context.user_data['schedule_type'] == 'weekdays':
        selected = context.user_data['selected_weekdays']
        days_str = ', '.join([WEEKDAYS_SHORT[d] for d in sorted(selected)])
        schedule_info = f"{days_str}"

    await query.message.edit_text(
        f"üíä <b>{context.user_data['med_name']}</b>\n"
        f"üìÖ –ö—É—Ä—Å: {context.user_data['med_duration']} –¥–Ω–µ–π\n"
        f"üìã –ü—Ä–∏—ë–º: {schedule_info}\n\n"
        "üî¢ –®–∞–≥ 4/8: –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å?",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_FREQUENCY

async def add_medication_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    frequency = int(query.data.split('_')[1])
    context.user_data['frequency'] = frequency
    context.user_data['times'] = []
    context.user_data['current_time_index'] = 0
    context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_TIMES_PERIOD]

    return await ask_time_period(query, context)

async def ask_time_period(query, context):
    """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–Ω—è"""
    current_index = context.user_data['current_time_index']
    total = context.user_data['frequency']

    keyboard = [
        [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ (6-11)", callback_data="period_morning")],
        [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å (11-17)", callback_data="period_day")],
        [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä (17-22)", callback_data="period_evening")],
        [InlineKeyboardButton("üåô –ù–æ—á—å (22-6)", callback_data="period_night")],
    ]
    keyboard = add_navigation_buttons(keyboard, step_number=5, show_back=True)
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üíä <b>{context.user_data['med_name']}</b>\n"
        f"‚è∞ –ü—Ä–∏—ë–º {current_index + 1}/{total}\n\n"
        "–®–∞–≥ 5/8: –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_TIMES_PERIOD

async def add_medication_time_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    query = update.callback_query
    await query.answer()

    period = query.data.split('_')[1]
    context.user_data['current_period'] = period
    context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_TIME_INPUT]

    time_options = {
        'morning': ['06:00', '07:00', '08:00', '09:00', '10:00'],
        'day': ['12:00', '13:00', '14:00', '15:00', '16:00'],
        'evening': ['18:00', '19:00', '20:00', '21:00'],
        'night': ['22:00', '23:00', '00:00']
    }

    keyboard = []
    for time_opt in time_options[period]:
        keyboard.append([InlineKeyboardButton(time_opt, callback_data=f"time_{time_opt}")])

    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—ë –≤—Ä–µ–º—è", callback_data="time_custom")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    period_names = {'morning': 'üåÖ –£—Ç—Ä–æ', 'day': '‚òÄÔ∏è –î–µ–Ω—å', 'evening': 'üåÜ –í–µ—á–µ—Ä', 'night': 'üåô –ù–æ—á—å'}

    await query.message.edit_text(
        f"üíä <b>{context.user_data['med_name']}</b>\n"
        f"üïê {period_names[period]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_TIME_INPUT

async def add_medication_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "time_custom":
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back"),
                         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.edit_text(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 08:30",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return ADD_MED_TIME_INPUT

        time_str = query.data.split('_')[1]
        context.user_data['times'].append({'time': time_str, 'period': context.user_data['current_period']})
        context.user_data['current_time_index'] += 1

        if context.user_data['current_time_index'] < context.user_data['frequency']:
            context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_TIMES_PERIOD]
            return await ask_time_period(query, context)
        else:
            context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_REMINDER]
            return await ask_reminder_interval(query, context)

    else:
        time_str = update.message.text.strip()

        try:
            datetime.strptime(time_str, '%H:%M')
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:30)")
            return ADD_MED_TIME_INPUT

        context.user_data['times'].append({'time': time_str, 'period': context.user_data['current_period']})
        context.user_data['current_time_index'] += 1

        if context.user_data['current_time_index'] < context.user_data['frequency']:
            context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_TIMES_PERIOD]

            keyboard = [
                [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ", callback_data="period_morning")],
                [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å", callback_data="period_day")],
                [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä", callback_data="period_evening")],
                [InlineKeyboardButton("üåô –ù–æ—á—å", callback_data="period_night")],
            ]
            keyboard = add_navigation_buttons(keyboard, step_number=5, show_back=True)
            reply_markup = InlineKeyboardMarkup(keyboard)

            current_index = context.user_data['current_time_index']
            total = context.user_data['frequency']

            await update.message.reply_text(
                f"üíä <b>{context.user_data['med_name']}</b>\n"
                f"‚è∞ –ü—Ä–∏—ë–º {current_index + 1}/{total}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return ADD_MED_TIMES_PERIOD
        else:
            context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_REMINDER]

            keyboard = [
                [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="reminder_30")],
                [InlineKeyboardButton("‚è∞ 1 —á–∞—Å", callback_data="reminder_60")],
                [InlineKeyboardButton("‚è∞ 1.5 —á–∞—Å–∞", callback_data="reminder_90")],
                [InlineKeyboardButton("‚è∞ 2 —á–∞—Å–∞", callback_data="reminder_120")],
            ]
            keyboard = add_navigation_buttons(keyboard, step_number=6, show_back=True)
            reply_markup = InlineKeyboardMarkup(keyboard)

            times_list = '\n'.join([f"  ‚Ä¢ {PERIODS[t['period']]}: {t['time']}" for t in context.user_data['times']])

            await update.message.reply_text(
                f"üíä <b>{context.user_data['med_name']}</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è:\n{times_list}\n\n"
                "üîî –®–∞–≥ 6/8: –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ)?",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

            return ADD_MED_REMINDER

async def ask_reminder_interval(query, context):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="reminder_30")],
        [InlineKeyboardButton("‚è∞ 1 —á–∞—Å", callback_data="reminder_60")],
        [InlineKeyboardButton("‚è∞ 1.5 —á–∞—Å–∞", callback_data="reminder_90")],
        [InlineKeyboardButton("‚è∞ 2 —á–∞—Å–∞", callback_data="reminder_120")],
    ]
    keyboard = add_navigation_buttons(keyboard, step_number=6, show_back=True)
    reply_markup = InlineKeyboardMarkup(keyboard)

    times_list = '\n'.join([f"  ‚Ä¢ {PERIODS[t['period']]}: {t['time']}" for t in context.user_data['times']])

    await query.message.edit_text(
        f"üíä <b>{context.user_data['med_name']}</b>\n\n"
        f"‚è∞ –í—Ä–µ–º—è:\n{times_list}\n\n"
        "üîî –®–∞–≥ 6/8: –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π?",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_REMINDER

async def add_medication_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    reminder_minutes = int(query.data.split('_')[1])
    context.user_data['reminder_interval'] = reminder_minutes
    context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_DOSAGE_CHOICE]

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å—Ö–µ–º—É –¥–æ–∑–∏—Ä–æ–≤–∫–∏
    keyboard = [
        [InlineKeyboardButton("–ù–µ—Ç, –æ–¥–∏–Ω–∞–∫–æ–≤–æ", callback_data="dosage_no")],
        [InlineKeyboardButton("–î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ö–µ–º—É", callback_data="dosage_yes")],
    ]
    keyboard = add_navigation_buttons(keyboard, step_number=7, show_back=True)
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üíä <b>{context.user_data['med_name']}</b>\n\n"
        "üíä –®–∞–≥ 7/8: –î–æ–∑–∏—Ä–æ–≤–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è?\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è - 2 —Ç–∞–±–ª–µ—Ç–∫–∏, –ø–æ—Ç–æ–º 1)",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return ADD_MED_DOSAGE_CHOICE

async def add_medication_dosage_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å—Ö–µ–º—ã –¥–æ–∑–∏—Ä–æ–≤–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "dosage_no":
        context.user_data['has_dosage_scheme'] = False
        return await show_confirmation(query, context)
    else:
        context.user_data['has_dosage_scheme'] = True
        context.user_data['dosage_schemes'] = []
        context.user_data['step_history'] = context.user_data.get('step_history', []) + [ADD_MED_DOSAGE_SCHEME]

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"üíä <b>{context.user_data['med_name']}</b>\n"
            f"–ö—É—Ä—Å: {context.user_data['med_duration']} –¥–Ω–µ–π\n\n"
            "üìù –§–æ—Ä–º–∞—Ç: <code>1-3: 2 —Ç–∞–±–ª–µ—Ç–∫–∏</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ö–µ–º—É –∏–ª–∏ <code>–≥–æ—Ç–æ–≤–æ</code>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        return ADD_MED_DOSAGE_SCHEME

async def add_medication_dosage_scheme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ —Å—Ö–µ–º—ã –¥–æ–∑–∏—Ä–æ–≤–∫–∏"""
    text = update.message.text.strip().lower()

    if text == '–≥–æ—Ç–æ–≤–æ':
        if not context.user_data.get('dosage_schemes'):
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ö–µ–º—É!")
            return ADD_MED_DOSAGE_SCHEME

        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_yes")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        return await show_confirmation_with_keyboard(update.message, context, reply_markup)

    try:
        parts = text.split(':')
        if len(parts) != 2:
            raise ValueError()

        days_range = parts[0].strip()
        dosage = parts[1].strip()

        day_from, day_to = map(int, days_range.split('-'))

        if day_from < 1 or day_to > context.user_data['med_duration'] or day_from > day_to:
            raise ValueError()

        context.user_data['dosage_schemes'].append({
            'day_from': day_from,
            'day_to': day_to,
            'dosage': dosage
        })

        schemes_list = '\n'.join([f"  ‚Ä¢ –î–Ω–∏ {s['day_from']}-{s['day_to']}: {s['dosage']}" 
                                  for s in context.user_data['dosage_schemes']])

        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!\n\n<b>–°—Ö–µ–º—ã:</b>\n{schemes_list}\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ <code>–≥–æ—Ç–æ–≤–æ</code>",
            parse_mode='HTML'
        )

        return ADD_MED_DOSAGE_SCHEME

    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>1-3: 2 —Ç–∞–±–ª–µ—Ç–∫–∏</code>",
            parse_mode='HTML'
        )
        return ADD_MED_DOSAGE_SCHEME

async def show_confirmation(query, context):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    schedule_info = ""
    if context.user_data['schedule_type'] == 'daily':
        schedule_info = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
    elif context.user_data['schedule_type'] == 'every_other':
        schedule_info = "–ß–µ—Ä–µ–∑ –¥–µ–Ω—å"
    elif context.user_data['schedule_type'] == 'weekdays':
        selected = [int(d) for d in context.user_data['weekdays'].split(',')]
        days_str = ', '.join([WEEKDAYS_SHORT[d] for d in sorted(selected)])
        schedule_info = days_str

    times_list = '\n'.join([f"  ‚Ä¢ {PERIODS[t['period']]}: {t['time']}" for t in context.user_data['times']])

    reminder_text = {30: "30 –º–∏–Ω", 60: "1 —á–∞—Å", 90: "1.5 —á–∞—Å–∞", 120: "2 —á–∞—Å–∞"}[context.user_data['reminder_interval']]

    start = context.user_data['med_start_date']
    end = context.user_data['med_end_date']

    text = f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    text += f"üíä {context.user_data['med_name']}\n"
    text += f"üìÖ {context.user_data['med_duration']} –¥–Ω–µ–π ({start.strftime('%d.%m')} - {end.strftime('%d.%m')})\n"
    text += f"üìã {schedule_info}\n"
    text += f"üî¢ {context.user_data['frequency']} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"
    text += f"‚è∞ <b>–í—Ä–µ–º—è:</b>\n{times_list}\n\n"
    text += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å —á–µ—Ä–µ–∑: {reminder_text}\n\n"

    if context.user_data.get('has_dosage_scheme'):
        schemes_list = '\n'.join([f"  ‚Ä¢ –î–Ω–∏ {s['day_from']}-{s['day_to']}: {s['dosage']}" 
                                  for s in context.user_data.get('dosage_schemes', [])])
        text += f"üíä <b>–°—Ö–µ–º–∞:</b>\n{schemes_list}\n\n"

    text += "–í—Å—ë –≤–µ—Ä–Ω–æ?"

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

    return ADD_MED_CONFIRM

async def show_confirmation_with_keyboard(message, context, reply_markup):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ message"""
    schedule_info = ""
    if context.user_data['schedule_type'] == 'daily':
        schedule_info = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
    elif context.user_data['schedule_type'] == 'every_other':
        schedule_info = "–ß–µ—Ä–µ–∑ –¥–µ–Ω—å"
    elif context.user_data['schedule_type'] == 'weekdays':
        selected = [int(d) for d in context.user_data['weekdays'].split(',')]
        days_str = ', '.join([WEEKDAYS_SHORT[d] for d in sorted(selected)])
        schedule_info = days_str

    times_list = '\n'.join([f"  ‚Ä¢ {PERIODS[t['period']]}: {t['time']}" for t in context.user_data['times']])
    reminder_text = {30: "30 –º–∏–Ω", 60: "1 —á–∞—Å", 90: "1.5 —á–∞—Å–∞", 120: "2 —á–∞—Å–∞"}[context.user_data['reminder_interval']]

    start = context.user_data['med_start_date']
    end = context.user_data['med_end_date']

    text = f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
    text += f"üíä {context.user_data['med_name']}\n"
    text += f"üìÖ {context.user_data['med_duration']} –¥–Ω–µ–π ({start.strftime('%d.%m')} - {end.strftime('%d.%m')})\n"
    text += f"üìã {schedule_info}\n"
    text += f"üî¢ {context.user_data['frequency']} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"
    text += f"‚è∞ <b>–í—Ä–µ–º—è:</b>\n{times_list}\n\n"
    text += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å —á–µ—Ä–µ–∑: {reminder_text}\n\n"

    if context.user_data.get('has_dosage_scheme'):
        schemes_list = '\n'.join([f"  ‚Ä¢ –î–Ω–∏ {s['day_from']}-{s['day_to']}: {s['dosage']}" 
                                  for s in context.user_data.get('dosage_schemes', [])])
        text += f"üíä <b>–°—Ö–µ–º–∞:</b>\n{schemes_list}\n\n"

    text += "–í—Å—ë –≤–µ—Ä–Ω–æ?"

    await message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

    return ADD_MED_CONFIRM

async def confirm_medication(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    user_id = get_or_create_user(update.effective_user.id)

    try:
        with get_db() as conn:
            c = conn.cursor()

            # –°–æ–∑–¥–∞—ë–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
            weekdays = context.user_data.get('weekdays')
            end_date = context.user_data['med_start_date'] + timedelta(
                days=context.user_data['med_duration'] - 1
            )

            c.execute('''INSERT INTO medications 
                         (user_id, name, duration_days, start_date, end_date, 
                          schedule_type, weekdays, has_dosage_scheme)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                      (user_id, context.user_data['med_name'], 
                       context.user_data['med_duration'],
                       context.user_data['med_start_date'].isoformat(),
                       end_date.isoformat(),
                       context.user_data['schedule_type'], weekdays,
                       context.user_data.get('has_dosage_scheme', False)))

            medication_id = c.lastrowid

            # –°–æ–∑–¥–∞—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            for time_data in context.user_data['times']:
                c.execute('''INSERT INTO schedules 
                             (medication_id, time, period, reminder_interval)
                             VALUES (?, ?, ?, ?)''',
                          (medication_id, time_data['time'], time_data['period'],
                           context.user_data['reminder_interval']))

            # –°–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—ã –¥–æ–∑–∏—Ä–æ–≤–∫–∏
            if context.user_data.get('has_dosage_scheme'):
                for scheme in context.user_data.get('dosage_schemes', []):
                    times_str = ','.join([t['time'] for t in context.user_data['times']])
                    c.execute('''INSERT INTO dosage_schemes 
                                 (medication_id, day_from, day_to, dosage, times)
                                 VALUES (?, ?, ?, ?, ?)''',
                              (medication_id, scheme['day_from'], scheme['day_to'],
                               scheme['dosage'], times_str))

            logger.info(f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ {medication_id} —Å–æ–∑–¥–∞–Ω–æ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {e}")
        # –ù–ï –æ—á–∏—â–∞–µ–º context.user_data, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="confirm_yes"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_med")
            ]])
        )
        return ADD_MED_CONFIRM

    # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ
    keyboard = [
        [InlineKeyboardButton("üíä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="med_current")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_medication")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"‚úÖ <b>–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        f"üíä {context.user_data['med_name']}\n"
        f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–∏—ë–º–µ! üíù",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    context.user_data.clear()
    return ConversationHandler.END

async def cancel_add_medication(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    if query:
        await query.answer()

    context.user_data.clear()

    text = "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    keyboard = [[InlineKeyboardButton("üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.message.edit_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)

    return ConversationHandler.END

# ============= –§–£–ù–ö–¶–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –õ–ï–ö–ê–†–°–¢–í =============

async def cancel_edit_medication(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    if query:
        await query.answer()

    medication_id = context.user_data.get('editing_med_id')
    context.user_data.clear()

    if medication_id:
        keyboard = [[InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤—É", callback_data=f"edit_med_{medication_id}")]]
    else:
        keyboard = [[InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_medications")]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"

    if query:
        await query.message.edit_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)

    return ConversationHandler.END

async def go_back_edit_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()

    step_history = context.user_data.get('edit_step_history', [])
    medication_id = context.user_data.get('editing_med_id')

    if not step_history or len(step_history) < 2:
        return await cancel_edit_medication(update, context)

    step_history.pop()
    previous_step = step_history[-1]
    context.user_data['edit_step_history'] = step_history

    med = get_medication_by_id(medication_id)
    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —à–∞–≥—É
    if previous_step == EDIT_MED_NAME:
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back_edit"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"‚úèÔ∏è –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {med['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=reply_markup
        )
        return EDIT_MED_NAME_INPUT

    elif previous_step == EDIT_MED_DURATION:
        keyboard = [
            [InlineKeyboardButton("3 –¥–Ω—è", callback_data="edit_duration_3"),
             InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data="edit_duration_5")],
            [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="edit_duration_7"),
             InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data="edit_duration_10")],
            [InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data="edit_duration_14"),
             InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data="edit_duration_21")],
            [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="edit_duration_30")],
            [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_duration_custom")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="edit_duration_date")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back_edit"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"üìÖ –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {med['duration_days']} –¥–Ω–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=reply_markup
        )
        return EDIT_MED_DURATION

    elif previous_step == EDIT_MED_SCHEDULE_TYPE:
        schedule_info = ""
        if med['schedule_type'] == 'daily':
            schedule_info = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
        elif med['schedule_type'] == 'every_other':
            schedule_info = "–ß–µ—Ä–µ–∑ –¥–µ–Ω—å"
        elif med['schedule_type'] == 'weekdays' and med['weekdays']:
            weekdays_list = [int(d) for d in med['weekdays'].split(',')]
            days_str = ', '.join([WEEKDAYS_SHORT[d] for d in sorted(weekdays_list)])
            schedule_info = f"{days_str}"

        keyboard = [
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="edit_sched_daily")],
            [InlineKeyboardButton("–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="edit_sched_every_other")],
            [InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="edit_sched_weekdays")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back_edit"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"üìã –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return EDIT_MED_SCHEDULE_TYPE

    return ConversationHandler.END

# ============= –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –õ–ï–ö–ê–†–°–¢–í =============

async def edit_medications_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    user_id = get_or_create_user(update.effective_user.id)
    medications = get_active_medications(user_id)

    if not medications:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=reply_markup
        )
        return

    keyboard = []
    for med in medications:
        keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è {med['name']}", callback_data=f"edit_med_{med['id']}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def edit_medication_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ–º"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{medication_id}")],
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"edit_duration_{medication_id}")],
        [InlineKeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data=f"edit_schedule_type_{medication_id}")],
        [InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏—ë–º–∞", callback_data=f"edit_frequency_{medication_id}")],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–æ–≤", callback_data=f"edit_time_{medication_id}")],
        [InlineKeyboardButton("üîî –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data=f"edit_reminder_{medication_id}")],
        [InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –∫—É—Ä—Å", callback_data=f"extend_{medication_id}")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å", callback_data=f"complete_{medication_id}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{medication_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_medications")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"‚úèÔ∏è <b>{med['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def edit_med_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['editing_med_id'] = medication_id
    context.user_data['edit_step_history'] = [EDIT_MED_NAME, EDIT_MED_NAME_INPUT]

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"‚úèÔ∏è –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {med['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=reply_markup
    )

    return EDIT_MED_NAME_INPUT

async def edit_med_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    new_name = update.message.text.strip()
    med_id = context.user_data['editing_med_id']

    update_medication(med_id, name=new_name)

    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}!"
    )

    context.user_data.clear()
    return ConversationHandler.END

async def edit_med_duration_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['editing_med_id'] = medication_id
    context.user_data['editing_start_date'] = datetime.strptime(med['start_date'], '%Y-%m-%d').date()
    context.user_data['edit_step_history'] = [EDIT_MED_DURATION]

    keyboard = [
        [InlineKeyboardButton("3 –¥–Ω—è", callback_data="edit_duration_3"),
         InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data="edit_duration_5")],
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="edit_duration_7"),
         InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data="edit_duration_10")],
        [InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data="edit_duration_14"),
         InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data="edit_duration_21")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="edit_duration_30")],
        [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_duration_custom")],
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="edit_duration_date")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üìÖ –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {med['duration_days']} –¥–Ω–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return EDIT_MED_DURATION

async def edit_med_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "edit_duration_custom":
        context.user_data['edit_step_history'] = context.user_data.get('edit_step_history', []) + [EDIT_MED_DURATION_INPUT]

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back_edit"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (1-365):",
            reply_markup=reply_markup
        )
        return EDIT_MED_DURATION_INPUT

    elif query.data == "edit_duration_date":
        context.user_data['edit_step_history'] = context.user_data.get('edit_step_history', []) + [EDIT_MED_DURATION_INPUT]

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back_edit"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025",
            reply_markup=reply_markup
        )
        return EDIT_MED_DURATION_INPUT

    else:
        duration = int(query.data.split('_')[2])
        med_id = context.user_data['editing_med_id']
        start_date = context.user_data['editing_start_date']
        new_end_date = start_date + timedelta(days=duration - 1)

        update_medication(med_id, duration_days=duration, end_date=new_end_date.isoformat())

        await query.message.edit_text(
            f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –¥–Ω–µ–π!"
        )

        return ConversationHandler.END

async def edit_med_duration_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = update.message.text.strip()

    med_id = context.user_data['editing_med_id']
    start_date = context.user_data['editing_start_date']

    if '.' in text:
        try:
            new_end_date = datetime.strptime(text, '%d.%m.%Y').date()

            if new_end_date <= start_date:
                await update.message.reply_text("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return EDIT_MED_DURATION_INPUT

            new_duration = (new_end_date - start_date).days + 1

            update_medication(med_id, duration_days=new_duration, end_date=new_end_date.isoformat())

            await update.message.reply_text(
                f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_duration} –¥–Ω–µ–π!"
            )

            context.user_data.clear()
            return ConversationHandler.END

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return EDIT_MED_DURATION_INPUT

    try:
        new_duration = int(text)
        if new_duration < 1 or new_duration > 365:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365:")
            return EDIT_MED_DURATION_INPUT

        new_end_date = start_date + timedelta(days=new_duration - 1)

        update_medication(med_id, duration_days=new_duration, end_date=new_end_date.isoformat())

        await update.message.reply_text(
            f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_duration} –¥–Ω–µ–π!"
        )

        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return EDIT_MED_DURATION_INPUT

"""
–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è medication_bot.py
–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""

# ============= –î–û–ü–û–õ–ù–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø =============

async def edit_schedule_type_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[3])  # edit_schedule_type_{id}
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['editing_med_id'] = medication_id
    context.user_data['edit_step_history'] = [EDIT_MED_SCHEDULE_TYPE]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_info = ""
    if med['schedule_type'] == 'daily':
        schedule_info = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
    elif med['schedule_type'] == 'every_other':
        schedule_info = "–ß–µ—Ä–µ–∑ –¥–µ–Ω—å"
    elif med['schedule_type'] == 'weekdays':
        if med['weekdays']:
            weekdays_list = [int(d) for d in med['weekdays'].split(',')]
            days_str = ', '.join([WEEKDAYS_SHORT[d] for d in sorted(weekdays_list)])
            schedule_info = f"{days_str}"

    keyboard = [
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="edit_sched_daily")],
        [InlineKeyboardButton("–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="edit_sched_every_other")],
        [InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="edit_sched_weekdays")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üìã –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

    return EDIT_MED_SCHEDULE_TYPE

async def edit_schedule_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    schedule_type = query.data.split('_')[2]  # edit_sched_{type}
    med_id = context.user_data['editing_med_id']

    if schedule_type == 'weekdays':
        context.user_data['edit_step_history'] = context.user_data.get('edit_step_history', []) + [EDIT_MED_WEEKDAYS]

        keyboard = []
        for day_num, day_name in WEEKDAYS_FULL.items():
            keyboard.append([InlineKeyboardButton(f"‚òê {day_name}", callback_data=f"edit_weekday_{day_num}")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_weekdays_done")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_back_edit"),
                         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data['selected_weekdays'] = []

        await query.message.edit_text(
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=reply_markup
        )

        return EDIT_MED_WEEKDAYS
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        weekdays = None if schedule_type != 'weekdays' else ""
        update_medication(med_id, schedule_type=schedule_type, weekdays=weekdays)

        await query.message.edit_text(
            "‚úÖ –¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤—É", callback_data=f"edit_med_{med_id}")
            ]])
        )

        context.user_data.clear()
        return ConversationHandler.END

async def edit_weekdays_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query

    if query.data == "edit_weekdays_done":
        if not context.user_data.get('selected_weekdays'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!", show_alert=True)
            return EDIT_MED_WEEKDAYS

        await query.answer()
        med_id = context.user_data['editing_med_id']
        weekdays = ','.join(map(str, sorted(context.user_data['selected_weekdays'])))
        update_medication(med_id, schedule_type='weekdays', weekdays=weekdays)

        await query.message.edit_text(
            "‚úÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤—É", callback_data=f"edit_med_{med_id}")
            ]])
        )

        context.user_data.clear()
        return ConversationHandler.END

    day_num = int(query.data.split('_')[2])  # edit_weekday_{num}
    selected = context.user_data.get('selected_weekdays', [])

    if day_num in selected:
        selected.remove(day_num)
    else:
        selected.append(day_num)

    context.user_data['selected_weekdays'] = selected

    keyboard = []
    for d_num, d_name in WEEKDAYS_FULL.items():
        icon = "‚òëÔ∏è" if d_num in selected else "‚òê"
        keyboard.append([InlineKeyboardButton(f"{icon} {d_name}", callback_data=f"edit_weekday_{d_num}")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_weekdays_done")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_med_{context.user_data['editing_med_id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.answer()
    await query.message.edit_reply_markup(reply_markup=reply_markup)

    return EDIT_MED_WEEKDAYS

async def edit_frequency_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏—ë–º–∞"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])  # edit_frequency_{id}
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['editing_med_id'] = medication_id
    context.user_data['edit_step_history'] = [EDIT_MED_FREQUENCY]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤
    schedules = get_medication_schedules(medication_id)
    current_freq = len(schedules)

    keyboard = [
        [InlineKeyboardButton("1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="edit_freq_1")],
        [InlineKeyboardButton("2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="edit_freq_2")],
        [InlineKeyboardButton("3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="edit_freq_3")],
        [InlineKeyboardButton("4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="edit_freq_4")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üî¢ –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {current_freq} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É:",
        reply_markup=reply_markup
    )

    return EDIT_MED_FREQUENCY

async def edit_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    frequency = int(query.data.split('_')[2])  # edit_freq_{num}
    med_id = context.user_data['editing_med_id']

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    delete_medication_schedules(med_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    context.user_data['frequency'] = frequency
    context.user_data['times'] = []
    context.user_data['current_time_index'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    return await edit_time_start(query, context)

async def edit_time_start(query, context):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    current_index = context.user_data['current_time_index']
    total = context.user_data['frequency']

    keyboard = [
        [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ (6-11)", callback_data="edit_period_morning")],
        [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å (11-17)", callback_data="edit_period_day")],
        [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä (17-22)", callback_data="edit_period_evening")],
        [InlineKeyboardButton("üåô –ù–æ—á—å (22-6)", callback_data="edit_period_night")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_med_{context.user_data['editing_med_id']}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"‚è∞ –ü—Ä–∏—ë–º {current_index + 1}/{total}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:",
        reply_markup=reply_markup
    )

    return EDIT_MED_TIMES_PERIOD

async def ask_edit_time_period(query, context):
    """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–Ω—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    current_index = context.user_data['current_time_index']
    total = context.user_data['frequency']

    keyboard = [
        [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ (6-11)", callback_data="edit_period_morning")],
        [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å (11-17)", callback_data="edit_period_day")],
        [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä (17-22)", callback_data="edit_period_evening")],
        [InlineKeyboardButton("üåô –ù–æ—á—å (22-6)", callback_data="edit_period_night")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_med_{context.user_data['editing_med_id']}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"‚è∞ –ü—Ä–∏—ë–º {current_index + 1}/{total}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:",
        reply_markup=reply_markup
    )

    return EDIT_MED_TIMES_PERIOD

async def edit_time_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    period = query.data.split('_')[2]  # edit_period_{period}
    context.user_data['current_period'] = period

    time_options = {
        'morning': ['06:00', '07:00', '08:00', '09:00', '10:00'],
        'day': ['12:00', '13:00', '14:00', '15:00', '16:00'],
        'evening': ['18:00', '19:00', '20:00', '21:00'],
        'night': ['22:00', '23:00', '00:00']
    }

    keyboard = []
    for time_opt in time_options[period]:
        keyboard.append([InlineKeyboardButton(time_opt, callback_data=f"edit_time_{time_opt}")])

    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—ë –≤—Ä–µ–º—è", callback_data="edit_time_custom")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_med_{context.user_data['editing_med_id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    period_names = {'morning': 'üåÖ –£—Ç—Ä–æ', 'day': '‚òÄÔ∏è –î–µ–Ω—å', 'evening': 'üåÜ –í–µ—á–µ—Ä', 'night': 'üåô –ù–æ—á—å'}

    await query.message.edit_text(
        f"üïê {period_names[period]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup
    )

    return EDIT_MED_TIME_INPUT

async def edit_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "edit_time_custom":
            await query.message.edit_text(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 08:30"
            )
            return EDIT_MED_TIME_INPUT

        time_str = query.data.split('_')[2]  # edit_time_{time}
        context.user_data['times'].append({'time': time_str, 'period': context.user_data['current_period']})
        context.user_data['current_time_index'] += 1

        if context.user_data['current_time_index'] < context.user_data['frequency']:
            return await edit_time_start(query, context)
        else:
            return await ask_edit_reminder_interval(query, context)

    else:
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time_str = update.message.text.strip()

        try:
            datetime.strptime(time_str, '%H:%M')
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:30)")
            return EDIT_MED_TIME_INPUT

        context.user_data['times'].append({'time': time_str, 'period': context.user_data['current_period']})
        context.user_data['current_time_index'] += 1

        if context.user_data['current_time_index'] < context.user_data['frequency']:
            keyboard = [
                [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ", callback_data="edit_period_morning")],
                [InlineKeyboardButton("‚òÄÔ∏è –î–µ–Ω—å", callback_data="edit_period_day")],
                [InlineKeyboardButton("üåÜ –í–µ—á–µ—Ä", callback_data="edit_period_evening")],
                [InlineKeyboardButton("üåô –ù–æ—á—å", callback_data="edit_period_night")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            current_index = context.user_data['current_time_index']
            total = context.user_data['frequency']

            await update.message.reply_text(
                f"‚è∞ –ü—Ä–∏—ë–º {current_index + 1}/{total}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è:",
                reply_markup=reply_markup
            )
            return EDIT_MED_TIMES_PERIOD
        else:
            keyboard = [
                [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="edit_reminder_int_30")],
                [InlineKeyboardButton("‚è∞ 1 —á–∞—Å", callback_data="edit_reminder_int_60")],
                [InlineKeyboardButton("‚è∞ 1.5 —á–∞—Å–∞", callback_data="edit_reminder_int_90")],
                [InlineKeyboardButton("‚è∞ 2 —á–∞—Å–∞", callback_data="edit_reminder_int_120")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            times_list = '\n'.join([f"  ‚Ä¢ {PERIODS[t['period']]}: {t['time']}" for t in context.user_data['times']])

            await update.message.reply_text(
                f"‚è∞ –í—Ä–µ–º—è:\n{times_list}\n\nüîî –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ)?",
                reply_markup=reply_markup
            )

            return EDIT_MED_REMINDER

async def ask_edit_reminder_interval(query, context):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="edit_reminder_int_30")],
        [InlineKeyboardButton("‚è∞ 1 —á–∞—Å", callback_data="edit_reminder_int_60")],
        [InlineKeyboardButton("‚è∞ 1.5 —á–∞—Å–∞", callback_data="edit_reminder_int_90")],
        [InlineKeyboardButton("‚è∞ 2 —á–∞—Å–∞", callback_data="edit_reminder_int_120")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    times_list = '\n'.join([f"  ‚Ä¢ {PERIODS[t['period']]}: {t['time']}" for t in context.user_data['times']])

    await query.message.edit_text(
        f"‚è∞ –í—Ä–µ–º—è:\n{times_list}\n\nüîî –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π?",
        reply_markup=reply_markup
    )

    return EDIT_MED_REMINDER

async def edit_reminder_interval_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    reminder_minutes = int(query.data.split('_')[3])  # edit_reminder_int_{minutes}
    med_id = context.user_data['editing_med_id']

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for time_data in context.user_data['times']:
        create_schedule(
            medication_id=med_id,
            time_str=time_data['time'],
            period=time_data['period'],
            reminder_interval=reminder_minutes
        )

    await query.message.edit_text(
        "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤—É", callback_data=f"edit_med_{med_id}")
        ]])
    )

    context.user_data.clear()
    return ConversationHandler.END

async def edit_reminder_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])  # edit_reminder_{id}
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['editing_med_id'] = medication_id
    context.user_data['edit_step_history'] = [EDIT_MED_REMINDER]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    schedules = get_medication_schedules(medication_id)
    current_interval = schedules[0]['reminder_interval'] if schedules else 60

    reminder_text = {30: "30 –º–∏–Ω", 60: "1 —á–∞—Å", 90: "1.5 —á–∞—Å–∞", 120: "2 —á–∞—Å–∞"}.get(current_interval, f"{current_interval} –º–∏–Ω")

    keyboard = [
        [InlineKeyboardButton("‚è∞ 30 –º–∏–Ω—É—Ç", callback_data="final_reminder_30")],
        [InlineKeyboardButton("‚è∞ 1 —á–∞—Å", callback_data="final_reminder_60")],
        [InlineKeyboardButton("‚è∞ 1.5 —á–∞—Å–∞", callback_data="final_reminder_90")],
        [InlineKeyboardButton("‚è∞ 2 —á–∞—Å–∞", callback_data="final_reminder_120")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_med")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"üîî –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {reminder_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=reply_markup
    )

    return EDIT_MED_REMINDER

async def edit_reminder_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    reminder_minutes = int(query.data.split('_')[2])  # final_reminder_{minutes}
    med_id = context.user_data['editing_med_id']

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —ç—Ç–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    conn = get_connection()
    c = conn.cursor()
    c.execute('UPDATE schedules SET reminder_interval = ? WHERE medication_id = ?', 
              (reminder_minutes, med_id))
    conn.commit()
    conn.close()

    reminder_text = {30: "30 –º–∏–Ω", 60: "1 —á–∞—Å", 90: "1.5 —á–∞—Å–∞", 120: "2 —á–∞—Å–∞"}[reminder_minutes]

    await query.message.edit_text(
        f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {reminder_text}!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤—É", callback_data=f"edit_med_{med_id}")
        ]])
    )

    context.user_data.clear()
    return ConversationHandler.END



# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: edit_schedule_type_start, edit_frequency_start, edit_times_start, edit_reminder_start
# –û–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ add_ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –≤–º–µ—Å—Ç–æ create - update/delete old and create new (–¥–ª—è schedules, –Ω–∞–ø—Ä–∏–º–µ—Ä, delete_medication_schedules –∏ create new)

async def extend_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[1])

    keyboard = [
        [InlineKeyboardButton("‚ûï 3 –¥–Ω—è", callback_data=f"extend_days_{medication_id}_3")],
        [InlineKeyboardButton("‚ûï 7 –¥–Ω–µ–π", callback_data=f"extend_days_{medication_id}_7")],
        [InlineKeyboardButton("‚ûï 14 –¥–Ω–µ–π", callback_data=f"extend_days_{medication_id}_14")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_med_{medication_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        "‚ûï –ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∫—É—Ä—Å?",
        reply_markup=reply_markup
    )

async def extend_course_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    medication_id = int(parts[2])
    days = int(parts[3])

    extend_medication_course(medication_id, days)

    await query.message.edit_text(
        f"‚úÖ –ö—É—Ä—Å –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º", callback_data="med_current")
        ]])
    )

async def complete_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[1])
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text(
            "‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            parse_mode='HTML'
        )
        return

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_confirm_{medication_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_med_{medication_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å <b>{med['name']}</b>?",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def complete_course_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])
    deactivate_medication(medication_id)

    user_id = get_or_create_user(update.effective_user.id)
    unlocked = check_and_unlock_achievements(user_id, context)

    text = "‚úÖ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –≤—ã–ø–∏—Ç—ã–µ!"

    if unlocked:
        text += "\n\nüéâ <b>–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        for ach_type in unlocked:
            ach = ACHIEVEMENTS[ach_type]
            text += f"{ach['name']}\n"

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º", callback_data="med_current")
        ]]),
        parse_mode='HTML'
    )

async def delete_medication(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[1])
    med = get_medication_by_id(medication_id)

    if not med:
        await query.message.edit_text(
            "‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            parse_mode='HTML'
        )
        return

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{medication_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_med_{medication_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å <b>{med['name']}</b>? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def delete_medication_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    medication_id = int(query.data.split('_')[2])
    delete_medication_by_id(medication_id)

    await query.message.edit_text(
        "‚úÖ –ö—É—Ä—Å —É–¥–∞–ª—ë–Ω!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º", callback_data="med_current")
        ]])
    )

# ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =============

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = get_or_create_user(update.effective_user.id)
    stats = get_user_statistics(user_id)
    achievements = get_user_achievements(user_id)

    text = "üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    text += f"‚úÖ –ö—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_courses']}\n"
    text += f"üíä –¢–∞–±–ª–µ—Ç–æ–∫ –ø—Ä–∏–Ω—è—Ç–æ: {stats['total_taken']}\n"
    text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['total_missed']}\n"
    text += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}%\n"
    text += f"üî• –°–µ—Ä–∏—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {stats['current_streak']} –¥–Ω–µ–π\n\n"

    if achievements:
        text += "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        for ach in achievements[:8]:
            ach_info = ACHIEVEMENTS.get(ach['achievement_type'])
            if ach_info:
                text += f"{ach_info['name']}\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

# ============= –ö–ê–õ–ï–ù–î–ê–†–¨ =============

async def show_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—ë–º–æ–≤"""
    user_id = get_or_create_user(update.effective_user.id)

    today = datetime.now(TIMEZONE).date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
    calendar_text = "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—ë–º–æ–≤</b>\n\n"
    calendar_text += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π:\n\n"

    for i in range(13, -1, -1):
        check_date = today - timedelta(days=i)
        logs = get_logs_for_date(user_id, check_date)

        if not logs:
            icon = "‚≠ïÔ∏è"
        else:
            taken = sum(1 for log in logs if log['status'] == 'taken')
            missed = sum(1 for log in logs if log['status'] == 'missed')

            if missed == 0:
                icon = "‚úÖ"
            elif missed == 1:
                icon = "‚ö†Ô∏è"
            else:
                icon = "‚ùå"

        date_str = check_date.strftime('%d.%m')
        weekday = WEEKDAYS_SHORT[check_date.weekday()]

        calendar_text += f"{icon} {weekday} {date_str}\n"

    calendar_text += "\n‚úÖ - –í—Å–µ –ø—Ä–∏—ë–º—ã\n‚ö†Ô∏è - –ü—Ä–æ–ø—É—â–µ–Ω 1\n‚ùå - –ü—Ä–æ–ø—É—â–µ–Ω–æ 2+\n‚≠ïÔ∏è - –ù–µ—Ç –ø—Ä–∏—ë–º–æ–≤"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(calendar_text, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(calendar_text, reply_markup=reply_markup, parse_mode='HTML')

# ============= –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =============

async def send_medication_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    conn = get_connection()
    c = conn.cursor()

    now = datetime.now(TIMEZONE)
    current_time = now.strftime('%H:%M')
    current_date = now.date()
    current_weekday = current_date.weekday()

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–π—á–∞—Å
    c.execute('''SELECT m.id as med_id, m.user_id, m.name, m.schedule_type, m.weekdays,
                        s.id as sched_id, s.time, s.period, s.reminder_interval,
                        u.telegram_id
                 FROM medications m
                 JOIN schedules s ON m.id = s.medication_id
                 JOIN users u ON m.user_id = u.id
                 WHERE m.is_active = 1 AND s.time = ?''', (current_time,))

    reminders = c.fetchall()
    conn.close()

    for reminder in reminders:
        med_id = reminder['med_id']
        user_telegram_id = reminder['telegram_id']
        med_name = reminder['name']
        schedule_type = reminder['schedule_type']
        weekdays = reminder['weekdays']
        sched_id = reminder['sched_id']
        reminder_interval = reminder['reminder_interval']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–≥–æ–¥–Ω—è
        should_send = False

        if schedule_type == 'daily':
            should_send = True
        elif schedule_type == 'every_other':
            med = get_medication_by_id(med_id)
            if not med:
                continue  # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            start_date = datetime.strptime(med['start_date'], '%Y-%m-%d').date()
            end_date = datetime.strptime(med['end_date'], '%Y-%m-%d').date()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫—É—Ä—Å–∞
            if start_date <= current_date <= end_date:
                days_since_start = (current_date - start_date).days
                should_send = (days_since_start % 2 == 0)
            else:
                should_send = False
        elif schedule_type == 'weekdays':
            if weekdays:
                weekdays_list = [int(d) for d in weekdays.split(',')]
                should_send = current_weekday in weekdays_list

        if should_send:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            with get_db() as check_conn:
                check_c = check_conn.cursor()
                five_min_ago = (now - timedelta(minutes=5)).isoformat()
                check_c.execute('''SELECT COUNT(*) as count FROM medication_logs 
                                  WHERE medication_id = ? AND schedule_id = ? 
                                  AND scheduled_date = ? AND created_at > ?''',
                              (med_id, sched_id, current_date.isoformat(), five_min_ago))

                if check_c.fetchone()['count'] > 0:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —É–∂–µ –±—ã–ª–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            greeting = get_greeting_by_time()
            nickname = get_random_nickname()

            keyboard = [
                [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{med_id}_{sched_id}_{current_date.isoformat()}")],
                [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"postpone_{med_id}_{sched_id}_{current_date.isoformat()}_{reminder_interval}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=user_telegram_id,
                    text=f"{greeting}, {nickname}!\n\nüíä –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å <b>{med_name}</b>",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                
                # –°–æ–∑–¥–∞—ë–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞
                create_active_reminder(med_id, sched_id, user_telegram_id, current_date)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def handle_taken(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–í—ã–ø–∏–ª–∞'"""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    med_id = int(parts[1])
    sched_id = int(parts[2])
    scheduled_date = datetime.strptime(parts[3], '%Y-%m-%d').date()

    med = get_medication_by_id(med_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ
    if not med or not med['is_active']:
        await query.message.edit_text(
            "‚ùå –≠—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.",
            parse_mode='HTML'
        )
        return

    schedules = get_medication_schedules(med_id)
    sched = next((s for s in schedules if s['id'] == sched_id), None)

    if med and sched:
        log_medication_taken(med_id, sched_id, scheduled_date, sched['time'])
        
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä)
        delete_active_reminder(med_id, sched_id, scheduled_date)

        user_id = get_or_create_user(update.effective_user.id)
        unlocked = check_and_unlock_achievements(user_id, context)

        praise = random.choice(PRAISE_MESSAGES)
        text = f"{praise}\n\nüíä {med['name']} - –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ"

        if unlocked:
            text += "\n\nüéâ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b>\n"
            for ach_type in unlocked:
                ach = ACHIEVEMENTS[ach_type]
                text += f"{ach['name']}\n"

        await query.message.edit_text(text, parse_mode='HTML')

async def handle_postpone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–û—Ç–ª–æ–∂–∏—Ç—å'"""
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    med_id = int(parts[1])
    sched_id = int(parts[2])
    scheduled_date_str = parts[3]
    scheduled_date = datetime.strptime(scheduled_date_str, '%Y-%m-%d').date()
    reminder_interval = int(parts[4])

    med = get_medication_by_id(med_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ
    if not med or not med['is_active']:
        await query.message.edit_text(
            "‚ùå –≠—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.",
            parse_mode='HTML'
        )
        return

    if med:
        now = datetime.now(TIMEZONE)
        next_time = now + timedelta(minutes=reminder_interval)
        
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä)
        delete_active_reminder(med_id, sched_id, scheduled_date)

        create_or_update_postponed_reminder(
            medication_id=med_id,
            schedule_id=sched_id,
            user_telegram_id=update.effective_user.id,
            scheduled_date=scheduled_date,
            original_time=now,
            next_time=next_time,
            reminder_interval=reminder_interval
        )

        postpone_msg = random.choice(POSTPONE_MESSAGES)
        interval_text = {30: "30 –º–∏–Ω—É—Ç", 60: "—á–∞—Å", 90: "1.5 —á–∞—Å–∞", 120: "2 —á–∞—Å–∞"}.get(reminder_interval, f"{reminder_interval} –º–∏–Ω—É—Ç")

        await query.message.edit_text(
            f"{postpone_msg}\n\nüíä {med['name']}\n‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {interval_text}",
            parse_mode='HTML'
        )

async def check_postponed_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminders = get_due_postponed_reminders()

    for reminder in reminders:
        med = get_medication_by_id(reminder['medication_id'])

        if not med or not med['is_active']:
            delete_postponed_reminder(reminder['id'])
            continue

        nickname = get_random_nickname()
        greeting = get_greeting_by_time()

        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{reminder['medication_id']}_{reminder['schedule_id']}_{reminder['scheduled_date']}")],
            [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –µ—â—ë", callback_data=f"postpone_{reminder['medication_id']}_{reminder['schedule_id']}_{reminder['scheduled_date']}_{reminder['reminder_interval']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(
                chat_id=reminder['user_telegram_id'],
                text=f"{greeting}, {nickname}!\n\nüíä –ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ <b>{med['name']}</b>\n‚è∞ –≠—Ç–æ {reminder['postpone_count']}-–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

            delete_postponed_reminder(reminder['id'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def check_unanswered_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω, –º–∞–∫—Å 5 —Ä–∞–∑)"""
    reminders = get_unanswered_reminders()
    
    for reminder in reminders:
        med = get_medication_by_id(reminder['medication_id'])
        
        if not med or not med['is_active']:
            delete_active_reminder(reminder['medication_id'], reminder['schedule_id'], 
                                  datetime.strptime(reminder['scheduled_date'], '%Y-%m-%d').date())
            continue
        
        nickname = get_random_nickname()
        greeting = get_greeting_by_time()
        
        # –ü–æ–ª—É—á–∞–µ–º reminder_interval –∏–∑ schedules
        schedules = get_medication_schedules(reminder['medication_id'])
        sched = next((s for s in schedules if s['id'] == reminder['schedule_id']), None)
        reminder_interval = sched['reminder_interval'] if sched else 60
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{reminder['medication_id']}_{reminder['schedule_id']}_{reminder['scheduled_date']}")],
            [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"postpone_{reminder['medication_id']}_{reminder['schedule_id']}_{reminder['scheduled_date']}_{reminder_interval}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        count = reminder['reminder_count'] + 1
        
        try:
            await context.bot.send_message(
                chat_id=reminder['user_telegram_id'],
                text=f"{greeting}, {nickname}!\n\nüíä –ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–∏–Ω—è—Ç—å <b>{med['name']}</b>\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {count} –∏–∑ 5",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
            if count >= 5:
                delete_active_reminder(reminder['medication_id'], reminder['schedule_id'], 
                                      datetime.strptime(reminder['scheduled_date'], '%Y-%m-%d').date())
            else:
                update_active_reminder_count(reminder['id'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ============= –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =============

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üíæ –°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_download_db")],
        [InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def admin_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()

    users = get_all_users()

    text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:</b>\n\n"

    for user in users:
        user_id = user['id']
        stats = get_user_statistics(user_id)
        active_meds = get_active_medications(user_id)

        text += f"<b>{user['name']}</b> (ID: {user['telegram_id']})\n"
        text += f"  üíä –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_meds)}\n"
        text += f"  ‚úÖ –ö—É—Ä—Å–æ–≤: {stats['completed_courses']}\n"
        text += f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}%\n"
        text += f"  üî• –°–µ—Ä–∏—è: {stats['current_streak']} –¥–Ω–µ–π\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text[:4000], reply_markup=reply_markup, parse_mode='HTML')

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer()

    users = get_all_users()

    total_users = len(users)
    total_medications = 0
    total_taken = 0
    total_courses = 0

    for user in users:
        stats = get_user_statistics(user['id'])
        active_meds = get_active_medications(user['id'])

        total_medications += len(active_meds)
        total_taken += stats['total_taken']
        total_courses += stats['completed_courses']

    text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
    text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"üíä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: {total_medications}\n"
    text += f"‚úÖ –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_courses}\n"
    text += f"üíä –í—Å–µ–≥–æ —Ç–∞–±–ª–µ—Ç–æ–∫ –ø—Ä–∏–Ω—è—Ç–æ: {total_taken}\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def admin_broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    await query.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode='HTML'
    )

    return ADMIN_BROADCAST

async def admin_broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = update.message.text

    users = get_all_users()
    success = 0
    failed = 0

    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user['telegram_id'],
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{text}",
                parse_mode='HTML'
            )
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")
            failed += 1

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–û—à–∏–±–æ–∫: {failed}"
    )

    return ConversationHandler.END

async def admin_download_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É"""
    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    try:
        await query.message.edit_text("üì¶ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        with open(DATABASE_NAME, 'rb') as db_file:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=db_file,
                filename=DATABASE_NAME,
                caption=f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö medications.db</b>\n\nüìÖ –°–æ–∑–¥–∞–Ω–æ: {datetime.now(TIMEZONE).strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML'
            )

        await query.message.edit_text(
            "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
            ]])
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
            ]])
        )

async def admin_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    query = update.callback_query
    await query.answer()
    await query.message.delete()

# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =============

async def handle_auth_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    telegram_id = int(query.data.split('_')[-1])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    set_user_authorization(telegram_id, True)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT name FROM users WHERE telegram_id = ?', (telegram_id,))
    result = c.fetchone()
    conn.close()

    user_name = result['name'] if result else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    await query.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω")
    await query.edit_message_text(
        f"‚úÖ <b>–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω</b>\n\n"
        f"üë§ {user_name} (ID: {telegram_id}) —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
        parse_mode='HTML'
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=telegram_id,
            text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                 "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def handle_auth_deny(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    telegram_id = int(query.data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT name FROM users WHERE telegram_id = ?', (telegram_id,))
    result = c.fetchone()
    conn.close()

    user_name = result['name'] if result else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    await query.edit_message_text(
        f"‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</b>\n\n"
        f"üë§ {user_name} (ID: {telegram_id}) –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
        parse_mode='HTML'
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=telegram_id,
            text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =============

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not is_user_authorized(user.id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    text = update.message.text

    if text == "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞":
        await medications_menu(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_menu(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(update, context)
    elif text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
        await show_calendar(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)

# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK =============

async def handle_callback_queries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    data = query.data
    user = update.effective_user

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞)
    if data.startswith("auth_approve_") or data.startswith("auth_deny_"):
        if data.startswith("auth_approve_"):
            await handle_auth_approve(update, context)
        elif data.startswith("auth_deny_"):
            await handle_auth_deny(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback
    if not is_user_authorized(user.id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É", show_alert=True)
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        await query.answer()
        await query.message.delete()
        await start_command(update, context)

    # –õ–µ–∫–∞—Ä—Å—Ç–≤–∞
    elif data == "medications":
        await medications_menu(update, context)
    elif data == "med_current":
        await show_current_medications(update, context)
    elif data == "med_completed":
        await show_completed_medications(update, context)
    elif data.startswith("med_detail_"):
        await show_medication_detail(update, context)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif data == "settings":
        await settings_menu(update, context)
    elif data == "edit_medications":
        await edit_medications_menu(update, context)
    elif data.startswith("edit_med_"):
        await edit_medication_actions(update, context)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    elif data.startswith("edit_name_"):
        return await edit_med_name_start(update, context)
    elif data.startswith("edit_duration_"):
        return await edit_med_duration_start(update, context)
    elif data.startswith("edit_schedule_type_"):
        return await edit_schedule_type_start(update, context)
    elif data.startswith("edit_sched_"):
        return await edit_schedule_type(update, context)
    elif data.startswith("edit_weekday_") or data == "edit_weekdays_done":
        return await edit_weekdays_select(update, context)
    elif data.startswith("edit_frequency_"):
        return await edit_frequency_start(update, context)
    elif data.startswith("edit_freq_"):
        return await edit_frequency(update, context)
    elif data.startswith("edit_time_"):
        return await edit_frequency_start(update, context)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —á–∞—Å—Ç–æ—Ç–µ, –∞ –∑–∞—Ç–µ–º –∫ –≤—Ä–µ–º–µ–Ω–∏
    elif data.startswith("edit_period_"):
        return await edit_time_period(update, context)
    elif data.startswith("edit_time_"):
        return await edit_time_input(update, context)
    elif data.startswith("edit_reminder_"):
        return await edit_reminder_start(update, context)
    elif data.startswith("final_reminder_"):
        return await edit_reminder_save(update, context)
    elif data.startswith("edit_reminder_int_"):
        return await edit_reminder_interval_complete(update, context)
    # –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö edit_ (schedule_type, frequency, times, reminder)

    elif data.startswith("extend_"):
        if data.startswith("extend_days_"):
            await extend_course_days(update, context)
        else:
            await extend_course(update, context)
    elif data.startswith("complete_"):
        if data.startswith("complete_confirm_"):
            await complete_course_confirm(update, context)
        else:
            await complete_course(update, context)
    elif data.startswith("delete_"):
        if data.startswith("delete_confirm_"):
            await delete_medication_confirm(update, context)
        else:
            await delete_medication(update, context)

    elif data == "cancel_add_med":
        await cancel_add_medication(update, context)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    elif data.startswith("taken_"):
        await handle_taken(update, context)
    elif data.startswith("postpone_"):
        await handle_postpone(update, context)

    # –ê–¥–º–∏–Ω
    elif data == "admin_panel":
        await admin_panel(update, context)
    elif data == "admin_users":
        await admin_users_list(update, context)
    elif data == "admin_stats":
        await admin_stats(update, context)
    elif data == "admin_broadcast":
        return await admin_broadcast_start(update, context)
    elif data == "admin_download_db":
        await admin_download_db(update, context)
    elif data == "admin_close":
        await admin_close(update, context)

    # –î—Ä—É–≥–∏–µ callback –¥–ª—è add/edit (duration, schedule, etc.)
    elif data.startswith("duration_"):
        await add_medication_duration(update, context)
    elif data.startswith("schedule_"):
        await add_medication_schedule_type(update, context)
    elif data.startswith("weekday_") or data == "weekdays_done":
        await add_medication_weekdays(update, context)
    elif data.startswith("freq_"):
        await add_medication_frequency(update, context)
    elif data.startswith("period_"):
        await add_medication_time_period(update, context)
    elif data.startswith("time_"):
        await add_medication_time_input(update, context)
    elif data.startswith("reminder_"):
        await add_medication_reminder(update, context)
    elif data.startswith("dosage_"):
        await add_medication_dosage_choice(update, context)
    elif data == "confirm_yes":
        await confirm_medication(update, context)

# ============= –ü–†–û–í–ï–†–ö–ê –û–ö–û–ù–ß–ê–ù–ò–Ø –ö–£–†–°–û–í =============

async def check_course_endings(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –∫—É—Ä—Å–æ–≤"""
    conn = get_connection()
    c = conn.cursor()

    today = datetime.now(TIMEZONE).date()
    tomorrow = today + timedelta(days=1)

    # –ö—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–≤—Ç—Ä–∞
    c.execute('''SELECT m.id, m.name, m.end_date, u.telegram_id
                 FROM medications m
                 JOIN users u ON m.user_id = u.id
                 WHERE m.is_active = 1 AND m.end_date = ?''', (tomorrow.isoformat(),))

    ending_soon = c.fetchall()

    for med in ending_soon:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"complete_confirm_{med['id']}")],
            [InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_{med['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(
                chat_id=med['telegram_id'],
                text=f"üëã –°–æ–ª–Ω—ã—à–∫–æ, –∑–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫—É—Ä—Å <b>{med['name']}</b>\n\n"
                     f"–í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É?",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏: {e}")

    conn.close()

# ============= –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =============

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_database()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(edit_schedule_type_start, pattern="^edit_schedule_type_"),
            CallbackQueryHandler(edit_frequency_start, pattern="^edit_frequency_"),
            CallbackQueryHandler(edit_time_input, pattern="^edit_time_"),
            CallbackQueryHandler(edit_reminder_start, pattern="^edit_reminder_"),
            CallbackQueryHandler(add_medication_start, pattern="add_medication"),
            CallbackQueryHandler(edit_med_name_start, pattern="^edit_name_"),
            CallbackQueryHandler(edit_med_duration_start, pattern="^edit_duration_"),
            CallbackQueryHandler(admin_broadcast_start, pattern="^admin_broadcast$")
        ],
        states={
            ADD_MED_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_medication_name),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$")
            ],
            ADD_MED_DURATION: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_duration)
            ],
            ADD_MED_DURATION_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_medication_duration_input),
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$")
            ],
            ADD_MED_SCHEDULE_TYPE: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_schedule_type)
            ],
            ADD_MED_WEEKDAYS: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_weekdays)
            ],
            ADD_MED_FREQUENCY: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_frequency)
            ],
            ADD_MED_TIMES_PERIOD: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_time_period)
            ],
            ADD_MED_TIME_INPUT: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_time_input),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_medication_time_input)
            ],
            ADD_MED_REMINDER: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_reminder)
            ],
            ADD_MED_DOSAGE_CHOICE: [
                CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(add_medication_dosage_choice)
            ],
            ADD_MED_DOSAGE_SCHEME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_medication_dosage_scheme),
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$")
            ],
            ADD_MED_CONFIRM: [
                CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
                CallbackQueryHandler(confirm_medication)
            ],
            EDIT_MED_NAME_INPUT: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_med_name_input)
            ],
            EDIT_MED_DURATION: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_med_duration)
            ],
            EDIT_MED_DURATION_INPUT: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_med_duration_input)
            ],
            EDIT_MED_SCHEDULE_TYPE: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_schedule_type)
            ],
            EDIT_MED_WEEKDAYS: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_weekdays_select)
            ],
            EDIT_MED_FREQUENCY: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_frequency)
            ],
            EDIT_MED_TIMES_PERIOD: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_time_period)
            ],
            EDIT_MED_TIME_INPUT: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_time_input),
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_time_input)
            ],
            EDIT_MED_REMINDER: [
                CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
                CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
                CallbackQueryHandler(edit_reminder_interval_complete, pattern="^edit_reminder_int_"),
                CallbackQueryHandler(edit_reminder_save, pattern="^final_reminder_")
            ],
            ADMIN_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_send)]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_add_medication, pattern="^cancel_add_med$"),
            CallbackQueryHandler(cancel_edit_medication, pattern="^cancel_edit_med$"),
            CallbackQueryHandler(go_back_step, pattern="^nav_back$"),
            CallbackQueryHandler(go_back_edit_step, pattern="^nav_back_edit$"),
            CommandHandler("cancel", cancel_add_medication)
        ],
    )



    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(conv_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_callback_queries))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

    # –ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    job_queue = application.job_queue

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(send_medication_reminder, interval=60, first=10)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_repeating(check_postponed_reminders, interval=300, first=30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞
    job_queue.run_repeating(check_unanswered_reminders, interval=900, first=60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 20:00
    job_queue.run_daily(check_course_endings, time=dt_time(20, 0, 0, tzinfo=TIMEZONE))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
